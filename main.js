(()=>{"use strict";const e=()=>{let e=!1;const t=[],a=[];return{placeShip:(e,t,s,r)=>{const n=((e,t,a,s)=>{let r=t,n=a;const o=[];for(let t=0;t<e;t+=1){let e=`${r},${n}`;o.push(e),"vertical"===s?e=`${r},${n+=1}`:"horizontal"===s&&(e=`${r+=1},${n}`)}let l=0;return{length:e,shipsCoordinatesArray:o,hits:l,hit:()=>(l+=1,l),position:s,isSunk:(e,t)=>e<=t,sunkStatus:!1}})(e,t,s,r);return a.push(n),a},receiveAttack:(e,s)=>{let r=!1,n="";const o=`${e},${s}`;return t.includes(o)?"Please enter coordinates not previously attacked!":(a.forEach((e=>{e.shipsCoordinatesArray.forEach((t=>!0===r?n:o!==t?(n="attack missed",n):(r=!0,e.hits=e.hit(),e.sunkStatus=e.isSunk(e.length,e.hits),n="ship has been hit!",n)))})),t.push(o),n)},shipArray:a,SquaresHit:t,determineIfConcluded:()=>{let t=0;return a.forEach((e=>{!0===e.sunkStatus&&(t+=1)})),t!==a.length||(e=!0),e},areAllShipsSunk:e}},t=(e,t)=>({playername:e,turn:t});(()=>{const e=document.querySelector(".playerboard"),t=document.createElement("div");t.classList.add("playerboard"),e.appendChild(t);for(let e=9;e>=-1;e-=1){const a=document.createElement("div");if(a.classList.add("row"),-1===e)for(let e=-1;e<10;e+=1)if(-1===e){const e=document.createElement("div");e.classList.add("squarelabel"),a.appendChild(e)}else{const t=document.createElement("div");t.classList.add("squarelabel"),t.textContent=`${e}`,a.appendChild(t)}else for(let t=-1;t<10;t+=1)if(-1===t){const t=document.createElement("div");t.classList.add("squarelabel"),t.textContent=`${e}`,a.appendChild(t)}else{const s=document.createElement("div");s.classList.add("playersquare"),s.setAttribute("id",`${t},${e}`),a.appendChild(s)}t.appendChild(a)}})(),t("Player 1",!0);const a=e();(()=>{const e=document.querySelector(".computerboard"),t=document.createElement("div");t.classList.add("playerboard"),e.appendChild(t);for(let e=9;e>=-1;e-=1){const a=document.createElement("div");if(a.classList.add("row"),-1===e)for(let e=-1;e<10;e+=1)if(-1===e){const e=document.createElement("div");e.classList.add("squarelabel"),a.appendChild(e)}else{const t=document.createElement("div");t.classList.add("squarelabel"),t.textContent=`${e}`,a.appendChild(t)}else for(let t=-1;t<10;t+=1)if(-1===t){const t=document.createElement("div");t.classList.add("squarelabel"),t.textContent=`${e}`,a.appendChild(t)}else{const s=document.createElement("div");s.classList.add("square"),s.setAttribute("id",`${t},${e}`),a.appendChild(s)}t.appendChild(a)}})();const s=e();t("Computer",!1);for(let e=1;e<7;e+=1){const t=Math.floor(Math.random()*(10-e)),a=Math.floor(Math.random()*(10-e)),r=Math.floor(2*Math.random());let n;1===r?n="vertical":0===r&&(n="horizontal"),s.placeShip(e,t,a,n)}console.log(s.shipArray),(()=>{document.querySelectorAll(".ship").forEach((e=>{e.addEventListener("dragstart",(e=>{e.dataTransfer.setData("shipgrabbed",e.target.id);const t=e.target.childElementCount;e.dataTransfer.setData("stringlen",t),e.dataTransfer.setData("xoff",e.offsetX),e.dataTransfer.setData("yoff",e.offsetY),e.target.classList.contains("vertical")?e.dataTransfer.setData("pos","vertical"):e.target.classList.contains("horizontal")&&e.dataTransfer.setData("pos","horizontal")}))}));const e=document.querySelectorAll(".playersquare");e.forEach((t=>{t.addEventListener("dragover",(e=>{e.preventDefault()})),t.addEventListener("drop",(t=>{t.preventDefault();const s=t.dataTransfer.getData("stringlen"),r=t.dataTransfer.getData("xoff"),n=t.dataTransfer.getData("yoff"),o=t.dataTransfer.getData("pos"),l=parseInt(s,10);let d=0,i=0;"vertical"===o?(d=0,i=l-Math.ceil(n/34)):"horizontal"===o&&(d=Math.floor(r/34),i=0);const c=t.target.id.split(","),h=parseInt(c[0],10)-d,p=parseInt(c[1],10)-i;if(console.log(`Final coords to create object are: ${h}, ${p}`),"vertical"===o&&p+l>10||"vertical"===o&&p<0)console.log("y above 10 or below 0");else if("horizontal"===o&&h+l>10||"horizontal"===o&&h<0)console.log("x above 10 or below 0");else{a.placeShip(l,h,p,o),console.log(a.shipArray),document.getElementById(t.dataTransfer.getData("shipgrabbed")).style.visibility="hidden";const s=a.shipArray.length-1,r=a.shipArray[s];e.forEach((e=>{for(let t=0;t<r.shipsCoordinatesArray.length;t+=1)e.id===r.shipsCoordinatesArray[t]&&e.classList.add("blue")}))}}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,