(()=>{"use strict";const e=()=>{let e=!1;const t=[],a=[];return{placeShip:(e,t,s,r)=>{if("vertical"===r&&s+e>9);else if(!("horizontal"===r&&t+e>9)){const n=((e,t,a,s)=>{let r=t,n=a;const o=[];for(let t=0;t<e;t+=1){let e=`${r},${n}`;o.push(e),"vertical"===s?e=`${r},${n+=1}`:"horizontal"===s&&(e=`${r+=1},${n}`)}let l=0;return{length:e,shipsCoordinatesArray:o,hits:l,hit:()=>(l+=1,l),position:s,isSunk:(e,t)=>e<=t,sunkStatus:!1}})(e,t,s,r);return a.push(n),a}return"Error"},receiveAttack:(e,s)=>{let r=!1,n="";const o=`${e},${s}`;return t.includes(o)?"Please enter coordinates not previously attacked!":(a.forEach((e=>{e.shipsCoordinatesArray.forEach((t=>!0===r?n:o!==t?(n="attack missed",n):(r=!0,e.hits=e.hit(),e.sunkStatus=e.isSunk(e.length,e.hits),n="ship has been hit!",n)))})),t.push(o),n)},shipArray:a,SquaresHit:t,determineIfConcluded:()=>{let t=0;return a.forEach((e=>{!0===e.sunkStatus&&(t+=1)})),t!==a.length||(e=!0),e},areAllShipsSunk:e}},t=(e,t)=>({playername:e,turn:t});(()=>{const e=document.querySelector(".playerboard"),t=document.createElement("div");t.classList.add("playerboard"),e.appendChild(t);for(let e=9;e>=-1;e-=1){const a=document.createElement("div");if(a.classList.add("row"),-1===e)for(let e=-1;e<10;e+=1)if(-1===e){const e=document.createElement("div");e.classList.add("squarelabel"),a.appendChild(e)}else{const t=document.createElement("div");t.classList.add("squarelabel"),t.textContent=`${e}`,a.appendChild(t)}else for(let t=-1;t<10;t+=1)if(-1===t){const t=document.createElement("div");t.classList.add("squarelabel"),t.textContent=`${e}`,a.appendChild(t)}else{const s=document.createElement("div");s.classList.add("square"),s.setAttribute("id",`${t},${e}`),a.appendChild(s)}t.appendChild(a)}})(),t("Player 1",!0),e(),(()=>{const e=document.querySelector(".computerboard"),t=document.createElement("div");t.classList.add("playerboard"),e.appendChild(t);for(let e=9;e>=-1;e-=1){const a=document.createElement("div");if(a.classList.add("row"),-1===e)for(let e=-1;e<10;e+=1)if(-1===e){const e=document.createElement("div");e.classList.add("squarelabel"),a.appendChild(e)}else{const t=document.createElement("div");t.classList.add("squarelabel"),t.textContent=`${e}`,a.appendChild(t)}else for(let t=-1;t<10;t+=1)if(-1===t){const t=document.createElement("div");t.classList.add("squarelabel"),t.textContent=`${e}`,a.appendChild(t)}else{const s=document.createElement("div");s.classList.add("square"),s.setAttribute("id",`${t},${e}`),a.appendChild(s)}t.appendChild(a)}})();const a=e();t("Computer",!1);for(let e=1;e<7;e+=1){const t=Math.floor(Math.random()*(10-e)),s=Math.floor(Math.random()*(10-e)),r=Math.floor(2*Math.random());let n;1===r?n="vertical":0===r&&(n="horizontal"),a.placeShip(e,t,s,n)}console.log(a.shipArray),document.querySelector(".shipbay").forEach((e=>{shipone.addEventListener("dragstart",(e=>{e.dataTransfer.setData("text/plain",shipone.id),console.log("shiponedragstart"),console.log(e),console.log(e.target),e.offsetX>32?console.log("second square"):e.offsetX<33&&console.log("first square")})),document.querySelectorAll(".square").forEach((e=>{e.addEventListener("dragover",(e=>{e.preventDefault()})),e.addEventListener("drop",(e=>{e.preventDefault(),e.target.classList.add("red");const t=e.dataTransfer.getData("text/plain");console.log(t)}))}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,