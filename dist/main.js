(()=>{"use strict";const e=()=>{let e=!1;const t=[],a=[];return{placeShip:(e,t,n,l)=>{if("vertical"===l&&n+e>9);else if(!("horizontal"===l&&t+e>9)){const s=((e,t,a,n)=>{let l=t,s=a;const d=[];for(let t=0;t<e;t+=1){let e=`${l},${s}`;d.push(e),"vertical"===n?e=`${l},${s+=1}`:"horizontal"===n&&(e=`${l+=1},${s}`)}let r=0;return{length:e,shipsCoordinatesArray:d,hits:r,hit:()=>(r+=1,r),position:n,isSunk:(e,t)=>e<=t,sunkStatus:!1}})(e,t,n,l);return a.push(s),a}return"Error"},receiveAttack:(e,n)=>{let l=!1,s="";const d=`${e},${n}`;return t.includes(d)?"Please enter coordinates not previously attacked!":(a.forEach((e=>{e.shipsCoordinatesArray.forEach((t=>!0===l?s:d!==t?(s="attack missed",s):(l=!0,e.hits=e.hit(),e.sunkStatus=e.isSunk(e.length,e.hits),s="ship has been hit!",s)))})),t.push(d),s)},shipArray:a,SquaresHit:t,determineIfConcluded:()=>{let t=0;return a.forEach((e=>{!0===e.sunkStatus&&(t+=1)})),t!==a.length||(e=!0),e},areAllShipsSunk:e}},t=(e,t)=>({playername:e,turn:t}),a=(document.getElementById("overlay").style.display="block",void document.getElementById("confirmname").addEventListener("click",(()=>{const e=document.getElementById("name");return document.querySelector(".playername").textContent=e.value,document.getElementById("overlay").style.display="none",e.value})));(()=>{const e=document.querySelector(".leftgame"),t=document.createElement("div");t.classList.add("playerboard"),e.appendChild(t);for(let e=9;e>=-1;e-=1){const a=document.createElement("div");if(a.classList.add("row"),-1===e)for(let e=-1;e<10;e+=1)if(-1===e){const e=document.createElement("div");e.classList.add("squarelabel"),a.appendChild(e)}else{const t=document.createElement("div");t.classList.add("squarelabel"),t.textContent=`${e}`,a.appendChild(t)}else for(let t=-1;t<10;t+=1)if(-1===t){const t=document.createElement("div");t.classList.add("squarelabel"),t.textContent=`${e}`,a.appendChild(t)}else{const n=document.createElement("div");n.classList.add("square"),n.setAttribute("id",`${t},${e}`),a.appendChild(n)}t.appendChild(a)}})(),t(`${a}`,!0),e(),(()=>{const e=document.querySelector(".rightgame"),t=document.createElement("div");t.classList.add("playerboard"),e.appendChild(t);for(let e=9;e>=-1;e-=1){const a=document.createElement("div");if(a.classList.add("row"),-1===e)for(let e=-1;e<10;e+=1)if(-1===e){const e=document.createElement("div");e.classList.add("squarelabel"),a.appendChild(e)}else{const t=document.createElement("div");t.classList.add("squarelabel"),t.textContent=`${e}`,a.appendChild(t)}else for(let t=-1;t<10;t+=1)if(-1===t){const t=document.createElement("div");t.classList.add("squarelabel"),t.textContent=`${e}`,a.appendChild(t)}else{const n=document.createElement("div");n.classList.add("square"),n.setAttribute("id",`${t},${e}`),a.appendChild(n)}t.appendChild(a)}})();const n=e();t("Computer",!1);for(let e=1;e<7;e+=1){const t=Math.floor(Math.random()*(10-e)),a=Math.floor(Math.random()*(10-e)),l=Math.floor(2*Math.random());let s;1===l?s="vertical":0===l&&(s="horizontal"),n.placeShip(e,t,a,s)}console.log(n.shipArray)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU1BLEVBQWNqQixTQUFTVyxjQUFjLE9BQzNDTSxFQUFZTCxVQUFVQyxJQUFJLGVBQzFCSSxFQUFZVixZQUFjLEdBQUdTLElBQzdCRCxFQUFJRCxZQUFZRyxFQUNsQixNQUdGLElBQUssSUFBSUQsR0FBSyxFQUFHQSxFQUFJLEdBQUlBLEdBQUssRUFDNUIsSUFBVyxJQUFQQSxFQUFVLENBQ1osTUFBTUMsRUFBY2pCLFNBQVNXLGNBQWMsT0FDM0NNLEVBQVlMLFVBQVVDLElBQUksZUFDMUJJLEVBQVlWLFlBQWMsR0FBRy9CLElBQzdCdUMsRUFBSUQsWUFBWUcsRUFDbEIsS0FBTyxDQUNMLE1BQU1DLEVBQVNsQixTQUFTVyxjQUFjLE9BQ3RDTyxFQUFPTixVQUFVQyxJQUFJLFVBQ3JCSyxFQUFPQyxhQUFhLEtBQU0sR0FBR0gsS0FBS3hDLEtBQ2xDdUMsRUFBSUQsWUFBWUksRUFDbEIsQ0FLSlIsRUFBWUksWUFBWUMsRUFDMUIsR0R0RkZPLEdBQ0EsTUFBTUMsRUFBZ0I1RCxJQUNMaUMsRUFBTyxZQUFZLEdBR3BDLElBQUssSUFBSXBCLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxHQUFLLEVBQUcsQ0FDN0IsTUFBTWdELEVBQWFDLEtBQUtDLE1BQU1ELEtBQUtFLFVBQVksR0FBS25ELElBQzlDb0QsRUFBYUgsS0FBS0MsTUFBTUQsS0FBS0UsVUFBWSxHQUFLbkQsSUFDOUNxRCxFQUFVSixLQUFLQyxNQUFzQixFQUFoQkQsS0FBS0UsVUFDaEMsSUFBSUcsRUFFWSxJQUFaRCxFQUNGQyxFQUFlLFdBQ00sSUFBWkQsSUFDVEMsRUFBZSxjQUdqQlAsRUFBY3hELFVBQVVTLEVBQUdnRCxFQUFZSSxFQUFZRSxFQUNyRCxDQUdBQyxRQUFRQyxJQUFJVCxFQUFjekQsVSIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvcHJvamVjdC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZGVzaWduLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNoaXAgPSAobGVuZ3RoLCB4Y29vcmQsIHljb29yZCwgcG9zaXRpb24pID0+IHtcbiAgbGV0IHRlbXB4ID0geGNvb3JkO1xuICBsZXQgdGVtcHkgPSB5Y29vcmQ7XG5cbiAgY29uc3Qgc2hpcHNDb29yZGluYXRlc0FycmF5ID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICBsZXQgc2hpcENvb3JkaW5hdGVzID0gYCR7dGVtcHh9LCR7dGVtcHl9YDtcbiAgICBzaGlwc0Nvb3JkaW5hdGVzQXJyYXkucHVzaChzaGlwQ29vcmRpbmF0ZXMpO1xuXG4gICAgaWYgKHBvc2l0aW9uID09PSBcInZlcnRpY2FsXCIpIHtcbiAgICAgIHNoaXBDb29yZGluYXRlcyA9IGAke3RlbXB4fSwkeyh0ZW1weSArPSAxKX1gO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09IFwiaG9yaXpvbnRhbFwiKSB7XG4gICAgICBzaGlwQ29vcmRpbmF0ZXMgPSBgJHsodGVtcHggKz0gMSl9LCR7dGVtcHl9YDtcbiAgICB9XG4gIH1cblxuICBsZXQgaGl0cyA9IDA7XG4gIGNvbnN0IGhpdCA9ICgpID0+IHtcbiAgICBoaXRzICs9IDE7XG4gICAgLy8gY29uc29sZS5sb2coaGl0cyk7XG4gICAgcmV0dXJuIGhpdHM7XG4gIH07XG5cbiAgY29uc3Qgc3Vua1N0YXR1cyA9IGZhbHNlO1xuICBjb25zdCBpc1N1bmsgPSAobGVuZ3RoT2ZTaGlwLCBoaXRzT2ZTaGlwKSA9PiB7XG4gICAgaWYgKGxlbmd0aE9mU2hpcCA8PSBoaXRzT2ZTaGlwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbGVuZ3RoLFxuICAgIHNoaXBzQ29vcmRpbmF0ZXNBcnJheSxcbiAgICBoaXRzLFxuICAgIGhpdCxcbiAgICBwb3NpdGlvbixcbiAgICBpc1N1bmssXG4gICAgc3Vua1N0YXR1cyxcbiAgfTtcbn07XG5cbmNvbnN0IEdhbWVib2FyZCA9ICgpID0+IHtcbiAgbGV0IGFyZUFsbFNoaXBzU3VuayA9IGZhbHNlO1xuICBjb25zdCBTcXVhcmVzSGl0ID0gW107XG4gIGNvbnN0IHNoaXBBcnJheSA9IFtdO1xuXG4gIGNvbnN0IHBsYWNlU2hpcCA9IChsZW5ndGgsIHhjb29yZCwgeWNvb3JkLCBwb3NpdGlvbikgPT4ge1xuICAgIGlmIChwb3NpdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiICYmIHljb29yZCArIGxlbmd0aCA+IDkpIHtcbiAgICAgIC8vXG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gXCJob3Jpem9udGFsXCIgJiYgeGNvb3JkICsgbGVuZ3RoID4gOSkge1xuICAgICAgLy9cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU09NRUhXRVJFIEhFUkUgQUREIFZBTElEQVRJT04gPSBHT0lORyBUSFJPVUdIIEFMTCBUSEUgQ09PUkRTIE9GIFRIRSBQUkVWSU9VUyBTSElQUyBBTkQgQ0hFQ0tJTkcgVEhFWSBET05UIEVRVUFMIEVBQ0ggT1RIRVIuXG4gICAgICBjb25zdCBuZXdTaGlwID0gU2hpcChsZW5ndGgsIHhjb29yZCwgeWNvb3JkLCBwb3NpdGlvbik7XG4gICAgICBzaGlwQXJyYXkucHVzaChuZXdTaGlwKTtcbiAgICAgIHJldHVybiBzaGlwQXJyYXk7XG4gICAgfVxuICAgIHJldHVybiBcIkVycm9yXCI7XG4gIH07XG5cbiAgY29uc3QgcmVjZWl2ZUF0dGFjayA9ICh4Y29vcmQsIHljb29yZCkgPT4ge1xuICAgIGxldCB3YXNIaXQgPSBmYWxzZTtcbiAgICBsZXQgbWVzc2FnZSA9IFwiXCI7XG4gICAgY29uc3QgY29vcmRpbmF0ZXMgPSBgJHt4Y29vcmR9LCR7eWNvb3JkfWA7XG4gICAgaWYgKFNxdWFyZXNIaXQuaW5jbHVkZXMoY29vcmRpbmF0ZXMpKSB7XG4gICAgICByZXR1cm4gXCJQbGVhc2UgZW50ZXIgY29vcmRpbmF0ZXMgbm90IHByZXZpb3VzbHkgYXR0YWNrZWQhXCI7XG4gICAgfVxuICAgIHNoaXBBcnJheS5mb3JFYWNoKChzaGlwKSA9PiB7XG4gICAgICBzaGlwLnNoaXBzQ29vcmRpbmF0ZXNBcnJheS5mb3JFYWNoKChzZWxlY3RlZFNoaXBDb29yZGluYXRlcykgPT4ge1xuICAgICAgICBpZiAod2FzSGl0ID09PSB0cnVlKSB7XG4gICAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29vcmRpbmF0ZXMgPT09IHNlbGVjdGVkU2hpcENvb3JkaW5hdGVzKSB7XG4gICAgICAgICAgLy9cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtZXNzYWdlID0gXCJhdHRhY2sgbWlzc2VkXCI7XG4gICAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICAgICAgd2FzSGl0ID0gdHJ1ZTtcbiAgICAgICAgc2hpcC5oaXRzID0gc2hpcC5oaXQoKTtcbiAgICAgICAgc2hpcC5zdW5rU3RhdHVzID0gc2hpcC5pc1N1bmsoc2hpcC5sZW5ndGgsIHNoaXAuaGl0cyk7XG4gICAgICAgIG1lc3NhZ2UgPSBcInNoaXAgaGFzIGJlZW4gaGl0IVwiO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIFNxdWFyZXNIaXQucHVzaChjb29yZGluYXRlcyk7XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH07XG5cbiAgY29uc3QgZGV0ZXJtaW5lSWZDb25jbHVkZWQgPSAoKSA9PiB7XG4gICAgbGV0IHN1bmtlblNoaXBzID0gMDtcbiAgICBzaGlwQXJyYXkuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgaWYgKHNoaXAuc3Vua1N0YXR1cyA9PT0gdHJ1ZSkge1xuICAgICAgICBzdW5rZW5TaGlwcyArPSAxO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHN1bmtlblNoaXBzID09PSBzaGlwQXJyYXkubGVuZ3RoKSB7XG4gICAgICBhcmVBbGxTaGlwc1N1bmsgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYXJlQWxsU2hpcHNTdW5rO1xuICAgIH1cbiAgICByZXR1cm4gYXJlQWxsU2hpcHNTdW5rO1xuICB9O1xuXG4gIC8vIGNvbnN0IGdhbWVib2FyZCA9IFtdO1xuICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpICs9IDEpIHtcbiAgLy8gICBsZXQgcm93ID0gW107XG4gIC8vICAgZm9yIChsZXQgaiA9IDA7IGogPCAxMDsgaiArPSAxKSB7XG4gIC8vICAgICBjb25zdCB0ZW1wID0gW2ksIGpdO1xuICAvLyAgICAgcm93LnB1c2godGVtcCk7XG4gIC8vICAgfVxuICAvLyAgIGdhbWVib2FyZC5wdXNoKHJvdyk7XG4gIC8vICAgcm93ID0gW107XG4gIC8vIH1cblxuICByZXR1cm4ge1xuICAgIHBsYWNlU2hpcCxcbiAgICByZWNlaXZlQXR0YWNrLFxuICAgIHNoaXBBcnJheSxcbiAgICBTcXVhcmVzSGl0LFxuICAgIGRldGVybWluZUlmQ29uY2x1ZGVkLFxuICAgIGFyZUFsbFNoaXBzU3VuayxcbiAgfTtcbn07XG5cblxuY29uc3QgUGxheWVyID0gKHBsYXllcm5hbWUsIHR1cm4pID0+IFxuICAvLyB0aGlzLnBsYXllcm5hbWUgPSBwbGF5ZXJuYW1lO1xuICAvLyB0aGlzLnR1cm4gPSB0dXJuO1xuICAgKHsgcGxheWVybmFtZSwgdHVybiB9KVxuO1xuXG5leHBvcnQgeyBTaGlwLCBHYW1lYm9hcmQsIFBsYXllciB9OyIsImltcG9ydCB7IEdhbWVib2FyZCwgU2hpcCwgUGxheWVyIH0gZnJvbSBcIi4vcHJvamVjdFwiO1xuaW1wb3J0IHsgZ2V0UGxheWVyTmFtZSwgZ2VuZXJhdGVQbGF5ZXJCb2FyZCwgZ2VuZXJhdGVDb21wdXRlckJvYXJkIH0gZnJvbSBcIi4vZGVzaWduXCI7XG5cblxuXG4vLyBHYW1lIGxvb3AgYmVnaW5zXG4vLyBHZXRzIHRoZSBwbGF5ZXIgYW5kIGNyZWF0ZXMgYm90aCBnYW1lYm9hcmRzLCBhbmQgYm90aCBvYmplY3RzLlxuY29uc3QgcGxheWVyc25hbWUgPSBnZXRQbGF5ZXJOYW1lKCk7IFxuZ2VuZXJhdGVQbGF5ZXJCb2FyZCgpO1xuY29uc3QgUGxheWVyMSA9IFBsYXllcihgJHtwbGF5ZXJzbmFtZX1gLCB0cnVlKTtcbmNvbnN0IFBsYXllcmJvYXJkID0gR2FtZWJvYXJkKCk7XG5cbmdlbmVyYXRlQ29tcHV0ZXJCb2FyZCgpO1xuY29uc3QgQ29tcHV0ZXJib2FyZCA9IEdhbWVib2FyZCgpO1xuY29uc3QgQ29tcHV0ZXIgPSBQbGF5ZXIoXCJDb21wdXRlclwiLCBmYWxzZSk7XG5cbi8vIFBsYWNpbmcgU2hpcHNcbmZvciAobGV0IGkgPSAxOyBpIDwgNzsgaSArPSAxKSB7XG4gIGNvbnN0IHRlbXB4Y29vcmQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMTAgLSBpKSk7XG4gIGNvbnN0IHRlbXB5Y29vcmQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMTAgLSBpKSk7XG4gIGNvbnN0IHRlbXBwb3MgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyKTtcbiAgbGV0IHRlbXBwb3NpdGlvbjtcbiAgXG4gIGlmICh0ZW1wcG9zID09PSAxKSB7XG4gICAgdGVtcHBvc2l0aW9uID0gXCJ2ZXJ0aWNhbFwiO1xuICB9IGVsc2UgaWYgKHRlbXBwb3MgPT09IDApIHtcbiAgICB0ZW1wcG9zaXRpb24gPSBcImhvcml6b250YWxcIjtcbiAgfVxuXG4gIENvbXB1dGVyYm9hcmQucGxhY2VTaGlwKGksIHRlbXB4Y29vcmQsIHRlbXB5Y29vcmQsIHRlbXBwb3NpdGlvbik7XG59XG4vLyBGSVggLSBTaGlwcyBvdmVybGFwIVxuXG5jb25zb2xlLmxvZyhDb21wdXRlcmJvYXJkLnNoaXBBcnJheSk7XG5cbi8vIGNvbnNvbGUubG9nKENvbXB1dGVyYm9hcmQucGxhY2VTaGlwKDYsIDUsIDMsIFwiaG9yaXpvbnRhbFwiKSk7IiwiY29uc3QgZ2V0UGxheWVyTmFtZSA9ICgpID0+IHtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm92ZXJsYXlcIikuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICBjb25zdCBuYW1lYnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb25maXJtbmFtZVwiKTtcbiAgICBuYW1lYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBuYW1laW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5hbWVcIik7XG4gICAgICBjb25zdCBkb21wbGF5ZXJuYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wbGF5ZXJuYW1lXCIpO1xuICAgICAgZG9tcGxheWVybmFtZS50ZXh0Q29udGVudCA9IG5hbWVpbnB1dC52YWx1ZTtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwib3ZlcmxheVwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICByZXR1cm4gbmFtZWlucHV0LnZhbHVlO1xuICAgIH0pXG59XG5cbmNvbnN0IGdlbmVyYXRlUGxheWVyQm9hcmQgPSAoKSA9PiB7XG4gIGNvbnN0IGxlZnRnYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5sZWZ0Z2FtZVwiKTtcbiAgY29uc3QgcGxheWVyQm9hcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBwbGF5ZXJCb2FyZC5jbGFzc0xpc3QuYWRkKFwicGxheWVyYm9hcmRcIik7XG4gIGxlZnRnYW1lLmFwcGVuZENoaWxkKHBsYXllckJvYXJkKTtcblxuICBmb3IgKGxldCBpID0gOTsgaSA+PSAtMTsgaSAtPSAxKSB7XG4gICAgY29uc3Qgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICByb3cuY2xhc3NMaXN0LmFkZChcInJvd1wiKTtcbiAgICAvLyBmb3JcbiAgICBpZiAoIGkgPT09IC0xKSB7XG4gICAgICBmb3IgKGxldCBqID0gLTE7IGogPCAxMDsgaiArPSAxKSB7XG4gICAgICAgIGlmIChqID09PSAtMSkge1xuICAgICAgICAgIGNvbnN0IHNxdWFyZWxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICBzcXVhcmVsYWJlbC5jbGFzc0xpc3QuYWRkKFwic3F1YXJlbGFiZWxcIik7XG4gICAgICAgICAgcm93LmFwcGVuZENoaWxkKHNxdWFyZWxhYmVsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBzcXVhcmVsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgc3F1YXJlbGFiZWwuY2xhc3NMaXN0LmFkZChcInNxdWFyZWxhYmVsXCIpO1xuICAgICAgICAgIHNxdWFyZWxhYmVsLnRleHRDb250ZW50ID0gYCR7an1gXG4gICAgICAgICAgcm93LmFwcGVuZENoaWxkKHNxdWFyZWxhYmVsKTtcbiAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIHsgXG4gICAgICBmb3IgKGxldCBqID0gLTE7IGogPCAxMDsgaiArPSAxKSB7XG4gICAgICAgIGlmIChqID09PSAtMSkge1xuICAgICAgICAgIGNvbnN0IHNxdWFyZWxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICBzcXVhcmVsYWJlbC5jbGFzc0xpc3QuYWRkKFwic3F1YXJlbGFiZWxcIik7XG4gICAgICAgICAgc3F1YXJlbGFiZWwudGV4dENvbnRlbnQgPSBgJHtpfWBcbiAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQoc3F1YXJlbGFiZWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHNxdWFyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJzcXVhcmVcIik7XG4gICAgICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcImlkXCIsIGAke2p9LCR7aX1gKVxuICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChzcXVhcmUpO1xuICAgICAgICB9XG4gICAgICBcbiAgICAgIH1cbiAgICB9XG4gICAgLy9cbiAgICBwbGF5ZXJCb2FyZC5hcHBlbmRDaGlsZChyb3cpO1xuICB9XG4gIFxufVxuXG5jb25zdCBnZW5lcmF0ZUNvbXB1dGVyQm9hcmQgPSAoKSA9PiB7XG4gIGNvbnN0IHJpZ2h0Z2FtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucmlnaHRnYW1lXCIpO1xuICBjb25zdCBwbGF5ZXJCb2FyZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIHBsYXllckJvYXJkLmNsYXNzTGlzdC5hZGQoXCJwbGF5ZXJib2FyZFwiKTtcbiAgcmlnaHRnYW1lLmFwcGVuZENoaWxkKHBsYXllckJvYXJkKTtcblxuICBmb3IgKGxldCBpID0gOTsgaSA+PSAtMTsgaSAtPSAxKSB7XG4gICAgY29uc3Qgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICByb3cuY2xhc3NMaXN0LmFkZChcInJvd1wiKTtcbiAgICAvLyBmb3JcbiAgICBpZiAoIGkgPT09IC0xKSB7XG4gICAgICBmb3IgKGxldCBqID0gLTE7IGogPCAxMDsgaiArPSAxKSB7XG4gICAgICAgIGlmIChqID09PSAtMSkge1xuICAgICAgICAgIGNvbnN0IHNxdWFyZWxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICBzcXVhcmVsYWJlbC5jbGFzc0xpc3QuYWRkKFwic3F1YXJlbGFiZWxcIik7XG4gICAgICAgICAgcm93LmFwcGVuZENoaWxkKHNxdWFyZWxhYmVsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBzcXVhcmVsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgc3F1YXJlbGFiZWwuY2xhc3NMaXN0LmFkZChcInNxdWFyZWxhYmVsXCIpO1xuICAgICAgICAgIHNxdWFyZWxhYmVsLnRleHRDb250ZW50ID0gYCR7an1gXG4gICAgICAgICAgcm93LmFwcGVuZENoaWxkKHNxdWFyZWxhYmVsKTtcbiAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIHsgXG4gICAgICBmb3IgKGxldCBqID0gLTE7IGogPCAxMDsgaiArPSAxKSB7XG4gICAgICAgIGlmIChqID09PSAtMSkge1xuICAgICAgICAgIGNvbnN0IHNxdWFyZWxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICBzcXVhcmVsYWJlbC5jbGFzc0xpc3QuYWRkKFwic3F1YXJlbGFiZWxcIik7XG4gICAgICAgICAgc3F1YXJlbGFiZWwudGV4dENvbnRlbnQgPSBgJHtpfWBcbiAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQoc3F1YXJlbGFiZWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHNxdWFyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJzcXVhcmVcIik7XG4gICAgICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcImlkXCIsIGAke2p9LCR7aX1gKVxuICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChzcXVhcmUpO1xuICAgICAgICB9XG4gICAgICBcbiAgICAgIH1cbiAgICB9XG4gICAgLy9cbiAgICBwbGF5ZXJCb2FyZC5hcHBlbmRDaGlsZChyb3cpO1xuICB9XG59XG5cblxuXG5leHBvcnQgeyBnZXRQbGF5ZXJOYW1lLCBnZW5lcmF0ZVBsYXllckJvYXJkLCBnZW5lcmF0ZUNvbXB1dGVyQm9hcmQgfTsgXG5cbiJdLCJuYW1lcyI6WyJHYW1lYm9hcmQiLCJhcmVBbGxTaGlwc1N1bmsiLCJTcXVhcmVzSGl0Iiwic2hpcEFycmF5IiwicGxhY2VTaGlwIiwibGVuZ3RoIiwieGNvb3JkIiwieWNvb3JkIiwicG9zaXRpb24iLCJuZXdTaGlwIiwidGVtcHgiLCJ0ZW1weSIsInNoaXBzQ29vcmRpbmF0ZXNBcnJheSIsImkiLCJzaGlwQ29vcmRpbmF0ZXMiLCJwdXNoIiwiaGl0cyIsImhpdCIsImlzU3VuayIsImxlbmd0aE9mU2hpcCIsImhpdHNPZlNoaXAiLCJzdW5rU3RhdHVzIiwiU2hpcCIsInJlY2VpdmVBdHRhY2siLCJ3YXNIaXQiLCJtZXNzYWdlIiwiY29vcmRpbmF0ZXMiLCJpbmNsdWRlcyIsImZvckVhY2giLCJzaGlwIiwic2VsZWN0ZWRTaGlwQ29vcmRpbmF0ZXMiLCJkZXRlcm1pbmVJZkNvbmNsdWRlZCIsInN1bmtlblNoaXBzIiwiUGxheWVyIiwicGxheWVybmFtZSIsInR1cm4iLCJwbGF5ZXJzbmFtZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzdHlsZSIsImRpc3BsYXkiLCJhZGRFdmVudExpc3RlbmVyIiwibmFtZWlucHV0IiwicXVlcnlTZWxlY3RvciIsInRleHRDb250ZW50IiwidmFsdWUiLCJsZWZ0Z2FtZSIsInBsYXllckJvYXJkIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsImFwcGVuZENoaWxkIiwicm93IiwiaiIsInNxdWFyZWxhYmVsIiwic3F1YXJlIiwic2V0QXR0cmlidXRlIiwiZ2VuZXJhdGVQbGF5ZXJCb2FyZCIsInJpZ2h0Z2FtZSIsImdlbmVyYXRlQ29tcHV0ZXJCb2FyZCIsIkNvbXB1dGVyYm9hcmQiLCJ0ZW1weGNvb3JkIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwidGVtcHljb29yZCIsInRlbXBwb3MiLCJ0ZW1wcG9zaXRpb24iLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZVJvb3QiOiIifQ==