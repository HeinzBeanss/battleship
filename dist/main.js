(()=>{"use strict";const e=()=>{let e=!1;const t=[],r=[];return{placeShip:(e,t,a,s)=>{const n=((e,t,r,a)=>{let s=t,n=r;const l=[];for(let t=0;t<e;t+=1){let e=`${s},${n}`;l.push(e),"vertical"===a?e=`${s},${n+=1}`:"horizontal"===a&&(e=`${s+=1},${n}`)}let o=0;return{length:e,shipsCoordinatesArray:l,hits:o,hit:()=>(o+=1,o),position:a,isSunk:(e,t)=>e<=t,sunkStatus:!1}})(e,t,a,s);return r.push(n),r},receiveAttack:(e,a)=>{let s=!1,n="";const l=`${e},${a}`;return t.includes(l)?"Please enter coordinates not previously attacked!":(r.forEach((e=>{e.shipsCoordinatesArray.forEach((t=>!0===s?n:l!==t?(n="Attack Missed!",n):(s=!0,e.hits=e.hit(),e.sunkStatus=e.isSunk(e.length,e.hits),n="Attack Landed!",n)))})),t.push(l),n)},shipArray:r,SquaresHit:t,determineIfConcluded:()=>{let t=0;return r.forEach((e=>{!0===e.sunkStatus&&(t+=1)})),t!==r.length?(e=!1,e):(e=!0,e)},areAllShipsSunk:e}};let t="Player 1";document.getElementById("overlay").style.display="block",t=void document.getElementById("confirmname").addEventListener("click",(()=>{const e=document.getElementById("name"),t=document.querySelector(".playername");return""===e.value&&(e.value="Player"),t.textContent=e.value,document.getElementById("overlay").style.display="none",document.querySelector(".playerguesses").textContent=`${e.value}'s Last Guess:`,e.value})),console.log(t),(()=>{const e=document.querySelector(".playerboard"),t=document.createElement("div");t.classList.add("playerboard"),e.appendChild(t);for(let e=9;e>=-1;e-=1){const r=document.createElement("div");if(r.classList.add("row"),-1===e)for(let e=-1;e<10;e+=1)if(-1===e){const e=document.createElement("div");e.classList.add("squarelabel"),r.appendChild(e)}else{const t=document.createElement("div");t.classList.add("squarelabel"),t.textContent=`${e}`,r.appendChild(t)}else for(let t=-1;t<10;t+=1)if(-1===t){const t=document.createElement("div");t.classList.add("squarelabel"),t.textContent=`${e}`,r.appendChild(t)}else{const a=document.createElement("div");a.classList.add("playersquare"),a.setAttribute("id",`${t},${e}`),r.appendChild(a)}t.appendChild(r)}})();const r=e();(()=>{const e=document.querySelector(".computerboard"),t=document.createElement("div");t.classList.add("playerboard"),e.appendChild(t);for(let e=9;e>=-1;e-=1){const r=document.createElement("div");if(r.classList.add("row"),-1===e)for(let e=-1;e<10;e+=1)if(-1===e){const e=document.createElement("div");e.classList.add("squarelabel"),r.appendChild(e)}else{const t=document.createElement("div");t.classList.add("squarelabel"),t.textContent=`${e}`,r.appendChild(t)}else for(let t=-1;t<10;t+=1)if(-1===t){const t=document.createElement("div");t.classList.add("squarelabel"),t.textContent=`${e}`,r.appendChild(t)}else{const a=document.createElement("div");a.classList.add("square"),a.setAttribute("id",`${t},${e}`),r.appendChild(a)}t.appendChild(r)}})();const a=e(),s=document.querySelector(".start");s.disabled=!0;const n=document.querySelector(".reset"),l=document.querySelector(".result"),o=document.querySelector(".prevhitcoord"),i=document.querySelectorAll(".square"),d=[];let c;const u=()=>{for(let e=1;e<7;e+=1)if(6===a.shipArray.length)e=8;else{e=a.shipArray.length+1;const t=Math.floor(Math.random()*(10-e)),r=Math.floor(Math.random()*(10-e)),s=Math.floor(2*Math.random());let n;1===s?n="vertical":0===s&&(n="horizontal");let l=!1;a.shipArray.forEach((a=>{a.shipsCoordinatesArray.forEach((a=>{for(let s=0;s<e;s+=1)"vertical"===n?a===`${t},${r+s}`&&(l=!0):"horizontal"===n&&a===`${t+s},${r}`&&(l=!0);return e}))})),!0===l?e-=1:a.placeShip(e,t,r,n)}};u(),document.querySelector(".secret").addEventListener("click",(()=>{i.forEach((e=>{for(let t=0;t<a.shipArray.length;t+=1)a.shipArray[t].shipsCoordinatesArray.forEach((t=>{t===e.id&&e.classList.add("blue")}))}))})),(()=>{let e=0;document.querySelectorAll(".ship").forEach((e=>{e.addEventListener("dragstart",(e=>{e.dataTransfer.setData("shipgrabbed",e.target.id);const t=e.target.childElementCount;e.dataTransfer.setData("stringlen",t),e.dataTransfer.setData("xoff",e.offsetX),e.dataTransfer.setData("yoff",e.offsetY),e.target.classList.contains("vertical")?e.dataTransfer.setData("pos","vertical"):e.target.classList.contains("horizontal")&&e.dataTransfer.setData("pos","horizontal")}))}));const t=document.querySelectorAll(".playersquare");t.forEach((a=>{a.addEventListener("dragover",(e=>{e.preventDefault()})),a.addEventListener("drop",(a=>{a.preventDefault();const n=a.dataTransfer.getData("stringlen"),l=a.dataTransfer.getData("xoff"),o=a.dataTransfer.getData("yoff"),i=a.dataTransfer.getData("pos"),d=parseInt(n,10);let c=0,u=0;if("vertical"===i){c=0;const e=Math.ceil(o/34);u=d-e}else"horizontal"===i&&(c=Math.floor(l/34),u=0);const h=a.target.id.split(","),p=parseInt(h[0],10)-c,f=parseInt(h[1],10)-u;if("vertical"===i&&f+d>10||"vertical"===i&&f<0);else if("horizontal"===i&&p+d>10||"horizontal"===i&&p<0);else{let n=!1;if(r.shipArray.forEach((e=>{e.shipsCoordinatesArray.forEach((e=>{for(let t=0;t<d;t+=1)"vertical"===i?e===`${p},${f+t}`&&(n=!0):"horizontal"===i&&e===`${p+t},${f}`&&(n=!0)}))})),!0===n);else{r.placeShip(d,p,f,i),document.getElementById(a.dataTransfer.getData("shipgrabbed")).style.visibility="hidden",e+=1,6===e&&(e=0,s.disabled=!1);const n=r.shipArray.length-1,l=r.shipArray[n];t.forEach((e=>{for(let t=0;t<l.shipsCoordinatesArray.length;t+=1)e.id===l.shipsCoordinatesArray[t]&&e.classList.add("blue")}))}}}))}))})();const h=()=>{const e=document.querySelector(".computerguess");let t,a,s,n,l=0;if(l=r.SquaresHit.length,e.textContent===`Hit: ${r.SquaresHit[l-1]}`){const e=r.SquaresHit[l-1].split(","),o=e[0],i=e[1];"right"===c&&o<9&&!1===d.includes("right")?(s=0,n=0):"left"===c&&o>0&&!1===d.includes("left")?(s=0,n=1):"up"===c&&i<9&&!1===d.includes("up")?(s=1,n=0):"down"===c&&i>0&&!1===d.includes("down")?(s=1,n=1):4===d.length?(t=Math.floor(10*Math.random()),a=Math.floor(10*Math.random())):(s=Math.floor(2*Math.random()),n=Math.floor(2*Math.random())),0===s?0===n?(t=parseInt(o,10)+1,a=parseInt(i,10),c="right"):1===n&&(t=parseInt(o,10)-1,a=parseInt(i,10),c="left"):1===s&&(0===n?(t=parseInt(o,10),a=parseInt(i,10)+1,c="up"):1===n&&(t=parseInt(o,10),a=parseInt(i,10)-1,c="down")),(t<0||t>9||a>9||a<0)&&("right"===c?t=-0:"left"===c?t=0:"up"===c?a=-0:"down"===c&&(a=0))}else c=void 0,t=Math.floor(10*Math.random()),a=Math.floor(10*Math.random());const o=`${t},${a}`;return r.SquaresHit.includes(o)?(!1===d.includes(c)&&d.push(c),h()):(d.splice(0,d.length),r.receiveAttack(t,a),document.querySelectorAll(".playersquare").forEach((t=>{if(t.id===o)for(let a=0;a<r.shipArray.length;a+=1)for(let s=0;s<r.shipArray[a].shipsCoordinatesArray.length;s+=1)if(t.id!==r.shipArray[a].shipsCoordinatesArray[s])l=r.SquaresHit.length,e.textContent=`Missed: ${r.SquaresHit[l-1]}`,t.classList.add("failedhit");else if(t.id===r.shipArray[a].shipsCoordinatesArray[s])return l=r.SquaresHit.length,e.textContent=`Hit: ${r.SquaresHit[l-1]}`,void t.classList.add("successfulhit")}))),c},p=e=>{const t=e.target,s=e.target.id.split(","),n=s[0],d=s[1];let c=0;if(o.textContent=a.receiveAttack(n,d),"Please enter coordinates not previously attacked!"!==o.textContent)if("Attack Missed!"===o.textContent?(c=a.SquaresHit.length,l.textContent=`Missed: ${a.SquaresHit[c-1]}`,l.style.color="red",t.classList.add("failedhit")):"Attack Landed!"===o.textContent&&(c=a.SquaresHit.length,l.textContent=`Hit: ${a.SquaresHit[c-1]}`,l.style.color="green",t.classList.add("successfulhit")),!0===a.determineIfConcluded()){const e=document.querySelector(".playername");l.textContent=`Game Over! ${e.textContent} wins!`,l.style.color="green",i.forEach((e=>{e.removeEventListener("click",p)}))}else h(),!0===r.determineIfConcluded()&&(l.textContent="Game Over! Computer wins!",l.style.color="red",i.forEach((e=>{e.removeEventListener("click",p)})))};s.addEventListener("click",(()=>{s.disabled=!0,i.forEach((e=>{e.addEventListener("click",p)}))})),n.addEventListener("click",(()=>{document.querySelectorAll(".playersquare").forEach((e=>{e.classList.remove("successfulhit"),e.classList.remove("failedhit"),e.classList.remove("blue")})),i.forEach((e=>{e.removeEventListener("click",p),e.classList.remove("successfulhit"),e.classList.remove("failedhit"),e.classList.remove("blue")})),o.textContent="",l.textContent="",document.querySelector(".computerguess").textContent="Computer's Guess: ",s.disabled=!0,r.shipArray.splice(0,r.shipArray.length),r.SquaresHit.splice(0,r.SquaresHit.length),a.shipArray.splice(0,a.shipArray.length),a.SquaresHit.splice(0,a.SquaresHit.length),r.areAllShipsSunk=!1,a.areAllShipsSunk=!1,document.querySelectorAll(".ship").forEach((e=>{e.style.visibility="visible"})),u()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RSxFQUFZMUIsaUJBQWlCLFNBdENULEtBQ1FKLFNBQVNrQyxpQkFBaUIsaUJBRWxDeEMsU0FBU21HLElBQ3pCQSxFQUFhOUUsVUFBVXVGLE9BQU8saUJBQzlCVCxFQUFhOUUsVUFBVXVGLE9BQU8sYUFDOUJULEVBQWE5RSxVQUFVdUYsT0FBTyxPQUFPLElBR3ZDckUsRUFBbUJ2QyxTQUFTcUQsSUFDMUJBLEVBQWVzRCxvQkFBb0IsUUFBU1AsR0FDNUMvQyxFQUFlaEMsVUFBVXVGLE9BQU8saUJBQ2hDdkQsRUFBZWhDLFVBQVV1RixPQUFPLGFBQ2hDdkQsRUFBZWhDLFVBQVV1RixPQUFPLE9BQU8sSUFHekN0RSxFQUFhdkIsWUFBYyxHQUMzQnNCLEVBQU90QixZQUFjLEdBQ0NULFNBQVNPLGNBQWMsa0JBQy9CRSxZQUFjLHFCQUU1Qm1CLEVBQVlDLFVBQVcsRUFFdkJMLEVBQVl2RCxVQUFVMkgsT0FBTyxFQUFHcEUsRUFBWXZELFVBQVVFLFFBQ3REcUQsRUFBWXhELFdBQVc0SCxPQUFPLEVBQUdwRSxFQUFZeEQsV0FBV0csUUFDeER3RCxFQUFjMUQsVUFBVTJILE9BQU8sRUFBR2pFLEVBQWMxRCxVQUFVRSxRQUMxRHdELEVBQWMzRCxXQUFXNEgsT0FBTyxFQUFHakUsRUFBYzNELFdBQVdHLFFBQzVEcUQsRUFBWXpELGlCQUFrQixFQUM5QjRELEVBQWM1RCxpQkFBa0IsRUFFZmlDLFNBQVNrQyxpQkFBaUIsU0FDbEN4QyxTQUFTQyxJQUNoQkEsRUFBS08sTUFBTTJFLFdBQWEsU0FBUyxJQUVuQ3hDLEdBQXVCLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3Byb2plY3QuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2Rlc2lnbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTaGlwID0gKGxlbmd0aCwgeGNvb3JkLCB5Y29vcmQsIHBvc2l0aW9uKSA9PiB7XG4gIGxldCB0ZW1weCA9IHhjb29yZDtcbiAgbGV0IHRlbXB5ID0geWNvb3JkO1xuXG4gIGNvbnN0IHNoaXBzQ29vcmRpbmF0ZXNBcnJheSA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgbGV0IHNoaXBDb29yZGluYXRlcyA9IGAke3RlbXB4fSwke3RlbXB5fWA7XG4gICAgc2hpcHNDb29yZGluYXRlc0FycmF5LnB1c2goc2hpcENvb3JkaW5hdGVzKTtcblxuICAgIGlmIChwb3NpdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XG4gICAgICBzaGlwQ29vcmRpbmF0ZXMgPSBgJHt0ZW1weH0sJHsodGVtcHkgKz0gMSl9YDtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSBcImhvcml6b250YWxcIikge1xuICAgICAgc2hpcENvb3JkaW5hdGVzID0gYCR7KHRlbXB4ICs9IDEpfSwke3RlbXB5fWA7XG4gICAgfVxuICB9XG5cbiAgbGV0IGhpdHMgPSAwO1xuICBjb25zdCBoaXQgPSAoKSA9PiB7XG4gICAgaGl0cyArPSAxO1xuICAgIC8vIGNvbnNvbGUubG9nKGhpdHMpO1xuICAgIHJldHVybiBoaXRzO1xuICB9O1xuXG4gIGNvbnN0IHN1bmtTdGF0dXMgPSBmYWxzZTtcbiAgY29uc3QgaXNTdW5rID0gKGxlbmd0aE9mU2hpcCwgaGl0c09mU2hpcCkgPT4ge1xuICAgIGlmIChsZW5ndGhPZlNoaXAgPD0gaGl0c09mU2hpcCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGxlbmd0aCxcbiAgICBzaGlwc0Nvb3JkaW5hdGVzQXJyYXksXG4gICAgaGl0cyxcbiAgICBoaXQsXG4gICAgcG9zaXRpb24sXG4gICAgaXNTdW5rLFxuICAgIHN1bmtTdGF0dXMsXG4gIH07XG59O1xuXG5jb25zdCBHYW1lYm9hcmQgPSAoKSA9PiB7XG4gIGxldCBhcmVBbGxTaGlwc1N1bmsgPSBmYWxzZTtcbiAgY29uc3QgU3F1YXJlc0hpdCA9IFtdO1xuICBjb25zdCBzaGlwQXJyYXkgPSBbXTtcblxuICBjb25zdCBwbGFjZVNoaXAgPSAobGVuZ3RoLCB4Y29vcmQsIHljb29yZCwgcG9zaXRpb24pID0+IHtcbiAgICAvLyBTT01FSFdFUkUgSEVSRSBBREQgVkFMSURBVElPTiA9IEdPSU5HIFRIUk9VR0ggQUxMIFRIRSBDT09SRFMgT0YgVEhFIFBSRVZJT1VTIFNISVBTIEFORCBDSEVDS0lORyBUSEVZIERPTlQgRVFVQUwgRUFDSCBPVEhFUi5cbiAgICBjb25zdCBuZXdTaGlwID0gU2hpcChsZW5ndGgsIHhjb29yZCwgeWNvb3JkLCBwb3NpdGlvbik7XG4gICAgc2hpcEFycmF5LnB1c2gobmV3U2hpcCk7XG4gICAgcmV0dXJuIHNoaXBBcnJheTtcbiAgfTtcblxuICBjb25zdCByZWNlaXZlQXR0YWNrID0gKHhjb29yZCwgeWNvb3JkKSA9PiB7XG4gICAgbGV0IHdhc0hpdCA9IGZhbHNlO1xuICAgIGxldCBtZXNzYWdlID0gXCJcIjtcbiAgICBjb25zdCBjb29yZGluYXRlcyA9IGAke3hjb29yZH0sJHt5Y29vcmR9YDtcbiAgICBpZiAoU3F1YXJlc0hpdC5pbmNsdWRlcyhjb29yZGluYXRlcykpIHtcbiAgICAgIHJldHVybiBcIlBsZWFzZSBlbnRlciBjb29yZGluYXRlcyBub3QgcHJldmlvdXNseSBhdHRhY2tlZCFcIjtcbiAgICB9XG4gICAgc2hpcEFycmF5LmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgIHNoaXAuc2hpcHNDb29yZGluYXRlc0FycmF5LmZvckVhY2goKHNlbGVjdGVkU2hpcENvb3JkaW5hdGVzKSA9PiB7XG4gICAgICAgIGlmICh3YXNIaXQgPT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb29yZGluYXRlcyA9PT0gc2VsZWN0ZWRTaGlwQ29vcmRpbmF0ZXMpIHtcbiAgICAgICAgICAvL1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1lc3NhZ2UgPSBcIkF0dGFjayBNaXNzZWQhXCI7XG4gICAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICAgICAgd2FzSGl0ID0gdHJ1ZTtcbiAgICAgICAgc2hpcC5oaXRzID0gc2hpcC5oaXQoKTtcbiAgICAgICAgc2hpcC5zdW5rU3RhdHVzID0gc2hpcC5pc1N1bmsoc2hpcC5sZW5ndGgsIHNoaXAuaGl0cyk7XG4gICAgICAgIG1lc3NhZ2UgPSBcIkF0dGFjayBMYW5kZWQhXCI7XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgU3F1YXJlc0hpdC5wdXNoKGNvb3JkaW5hdGVzKTtcbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfTtcblxuICBjb25zdCBkZXRlcm1pbmVJZkNvbmNsdWRlZCA9ICgpID0+IHtcbiAgICBsZXQgc3Vua2VuU2hpcHMgPSAwO1xuICAgIHNoaXBBcnJheS5mb3JFYWNoKChzaGlwKSA9PiB7XG4gICAgICBpZiAoc2hpcC5zdW5rU3RhdHVzID09PSB0cnVlKSB7XG4gICAgICAgIHN1bmtlblNoaXBzICs9IDE7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoc3Vua2VuU2hpcHMgPT09IHNoaXBBcnJheS5sZW5ndGgpIHtcbiAgICAgIGFyZUFsbFNoaXBzU3VuayA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFyZUFsbFNoaXBzU3VuayA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGFyZUFsbFNoaXBzU3VuaztcbiAgICB9XG4gICAgcmV0dXJuIGFyZUFsbFNoaXBzU3VuaztcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHBsYWNlU2hpcCxcbiAgICByZWNlaXZlQXR0YWNrLFxuICAgIHNoaXBBcnJheSxcbiAgICBTcXVhcmVzSGl0LFxuICAgIGRldGVybWluZUlmQ29uY2x1ZGVkLFxuICAgIGFyZUFsbFNoaXBzU3VuayxcbiAgfTtcbn07XG5cbmV4cG9ydCB7IFNoaXAsIEdhbWVib2FyZCB9O1xuIiwiaW1wb3J0IHsgR2FtZWJvYXJkIH0gZnJvbSBcIi4vcHJvamVjdFwiO1xuaW1wb3J0IHtcbiAgZ2V0UGxheWVyTmFtZSxcbiAgZ2VuZXJhdGVQbGF5ZXJCb2FyZCxcbiAgZ2VuZXJhdGVDb21wdXRlckJvYXJkLFxufSBmcm9tIFwiLi9kZXNpZ25cIjtcblxuLy8gR2FtZSBsb29wIGJlZ2luc1xuLy8gR2V0cyB0aGUgcGxheWVyIGFuZCBjcmVhdGVzIGJvdGggZ2FtZWJvYXJkcywgYW5kIGJvdGggb2JqZWN0cy5cbmxldCBwbGF5ZXJzbmFtZSA9IFwiUGxheWVyIDFcIjtcbnBsYXllcnNuYW1lID0gZ2V0UGxheWVyTmFtZSgpO1xuY29uc29sZS5sb2cocGxheWVyc25hbWUpO1xuZ2VuZXJhdGVQbGF5ZXJCb2FyZCgpO1xuY29uc3QgUGxheWVyYm9hcmQgPSBHYW1lYm9hcmQoKTtcbmdlbmVyYXRlQ29tcHV0ZXJCb2FyZCgpO1xuY29uc3QgQ29tcHV0ZXJib2FyZCA9IEdhbWVib2FyZCgpO1xuY29uc3Qgc3RhcnRidXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnN0YXJ0XCIpO1xuc3RhcnRidXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuY29uc3QgcmVzZXRidXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJlc2V0XCIpO1xuY29uc3QgcmVzdWx0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5yZXN1bHRcIik7XG5jb25zdCBwcmV2aGl0Y29vcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByZXZoaXRjb29yZFwiKTtcbmNvbnN0IGFsbGNvbXB1dGVyc3F1YXJlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc3F1YXJlXCIpO1xuY29uc3QgZGlyZWN0aW9uQXJyYXkgPSBbXTtcbmxldCBkaXJlY3Rpb247XG4vLyBsZXQgdGVzdCA9IFwiMVwiO1xuLy8gY29uc29sZS5sb2codGVzdCk7XG5cbmNvbnN0IGdlbmVyYXRlQ29tcHV0ZXJTaGlwcyA9ICgpID0+IHtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCA3OyBpICs9IDEpIHtcbiAgICBpZiAoQ29tcHV0ZXJib2FyZC5zaGlwQXJyYXkubGVuZ3RoID09PSA2KSB7XG4gICAgICBpID0gODtcbiAgICB9IGVsc2Uge1xuICAgICAgaSA9IENvbXB1dGVyYm9hcmQuc2hpcEFycmF5Lmxlbmd0aCArIDE7XG4gICAgICBjb25zdCB0ZW1weGNvb3JkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKDEwIC0gaSkpO1xuICAgICAgY29uc3QgdGVtcHljb29yZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICgxMCAtIGkpKTtcbiAgICAgIGNvbnN0IHRlbXBwb3MgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyKTtcbiAgICAgIGxldCB0ZW1wcG9zaXRpb247XG4gICAgICBpZiAodGVtcHBvcyA9PT0gMSkge1xuICAgICAgICB0ZW1wcG9zaXRpb24gPSBcInZlcnRpY2FsXCI7XG4gICAgICB9IGVsc2UgaWYgKHRlbXBwb3MgPT09IDApIHtcbiAgICAgICAgdGVtcHBvc2l0aW9uID0gXCJob3Jpem9udGFsXCI7XG4gICAgICB9XG4gICAgICBsZXQgb3ZlcmxhcHBlZHN0YXR1cyA9IGZhbHNlO1xuICAgICAgQ29tcHV0ZXJib2FyZC5zaGlwQXJyYXkuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgICBzaGlwLnNoaXBzQ29vcmRpbmF0ZXNBcnJheS5mb3JFYWNoKChzaGlwY29vcmQpID0+IHtcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGk7IGogKz0gMSkge1xuICAgICAgICAgICAgaWYgKHRlbXBwb3NpdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XG4gICAgICAgICAgICAgIGlmIChzaGlwY29vcmQgPT09IGAke3RlbXB4Y29vcmR9LCR7dGVtcHljb29yZCArIGp9YCkge1xuICAgICAgICAgICAgICAgIG92ZXJsYXBwZWRzdGF0dXMgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRlbXBwb3NpdGlvbiA9PT0gXCJob3Jpem9udGFsXCIpIHtcbiAgICAgICAgICAgICAgaWYgKHNoaXBjb29yZCA9PT0gYCR7dGVtcHhjb29yZCArIGp9LCR7dGVtcHljb29yZH1gKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmxhcHBlZHN0YXR1cyA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChvdmVybGFwcGVkc3RhdHVzID09PSB0cnVlKSB7XG4gICAgICAgIGkgLT0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIENvbXB1dGVyYm9hcmQucGxhY2VTaGlwKGksIHRlbXB4Y29vcmQsIHRlbXB5Y29vcmQsIHRlbXBwb3NpdGlvbik7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5nZW5lcmF0ZUNvbXB1dGVyU2hpcHMoKTtcblxuY29uc3QgZ2VuZXJhdGVWaXN1YWxTaGlwcyA9ICgpID0+IHtcbiAgbGV0IHNoaXBzcGxhY2VkID0gMDtcblxuICBjb25zdCBzaGlwcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc2hpcFwiKTtcbiAgc2hpcHMuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgIHNoaXAuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdzdGFydFwiLCAoZSkgPT4ge1xuICAgICAgZS5kYXRhVHJhbnNmZXIuc2V0RGF0YShcInNoaXBncmFiYmVkXCIsIGUudGFyZ2V0LmlkKTtcbiAgICAgIGNvbnN0IHRlbXBsZW5ndGggPSBlLnRhcmdldC5jaGlsZEVsZW1lbnRDb3VudDtcbiAgICAgIGUuZGF0YVRyYW5zZmVyLnNldERhdGEoXCJzdHJpbmdsZW5cIiwgdGVtcGxlbmd0aCk7XG4gICAgICBlLmRhdGFUcmFuc2Zlci5zZXREYXRhKFwieG9mZlwiLCBlLm9mZnNldFgpO1xuICAgICAgZS5kYXRhVHJhbnNmZXIuc2V0RGF0YShcInlvZmZcIiwgZS5vZmZzZXRZKTtcbiAgICAgIGlmIChlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJ2ZXJ0aWNhbFwiKSkge1xuICAgICAgICBlLmRhdGFUcmFuc2Zlci5zZXREYXRhKFwicG9zXCIsIFwidmVydGljYWxcIik7XG4gICAgICB9IGVsc2UgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImhvcml6b250YWxcIikpIHtcbiAgICAgICAgZS5kYXRhVHJhbnNmZXIuc2V0RGF0YShcInBvc1wiLCBcImhvcml6b250YWxcIik7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIGNvbnN0IGFsbHNxdWFyZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnBsYXllcnNxdWFyZVwiKTtcbiAgYWxsc3F1YXJlcy5mb3JFYWNoKChzcXVhcmUpID0+IHtcbiAgICBzcXVhcmUuYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdvdmVyXCIsIChlKSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG4gICAgc3F1YXJlLmFkZEV2ZW50TGlzdGVuZXIoXCJkcm9wXCIsIChlKSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb25zdCBzdHJpbmdsZW4gPSBlLmRhdGFUcmFuc2Zlci5nZXREYXRhKFwic3RyaW5nbGVuXCIpO1xuICAgICAgY29uc3QgeG9mZiA9IGUuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJ4b2ZmXCIpO1xuICAgICAgY29uc3QgeW9mZiA9IGUuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJ5b2ZmXCIpO1xuICAgICAgY29uc3QgcG9zID0gZS5kYXRhVHJhbnNmZXIuZ2V0RGF0YShcInBvc1wiKTtcblxuICAgICAgY29uc3QgbGVuID0gcGFyc2VJbnQoc3RyaW5nbGVuLCAxMCk7XG4gICAgICBsZXQgb2Zmc2V0WFNxdWFyZSA9IDA7XG4gICAgICBsZXQgb2Zmc2V0WVNxdWFyZSA9IDA7XG4gICAgICBpZiAocG9zID09PSBcInZlcnRpY2FsXCIpIHtcbiAgICAgICAgb2Zmc2V0WFNxdWFyZSA9IDA7XG4gICAgICAgIGNvbnN0IHRlbXBvT2Zmc2V0WVNxdWFyZSA9IE1hdGguY2VpbCh5b2ZmIC8gMzQpO1xuICAgICAgICBvZmZzZXRZU3F1YXJlID0gbGVuIC0gdGVtcG9PZmZzZXRZU3F1YXJlO1xuICAgICAgfSBlbHNlIGlmIChwb3MgPT09IFwiaG9yaXpvbnRhbFwiKSB7XG4gICAgICAgIG9mZnNldFhTcXVhcmUgPSBNYXRoLmZsb29yKHhvZmYgLyAzNCk7XG4gICAgICAgIG9mZnNldFlTcXVhcmUgPSAwO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzdHJpbmdjb29yZCA9IGUudGFyZ2V0LmlkO1xuICAgICAgY29uc3QgY29vcmRhcnJyYXkgPSBzdHJpbmdjb29yZC5zcGxpdChcIixcIik7XG5cbiAgICAgIGNvbnN0IGZpbmFseGNvb3JkID0gcGFyc2VJbnQoY29vcmRhcnJyYXlbMF0sIDEwKSAtIG9mZnNldFhTcXVhcmU7XG4gICAgICBjb25zdCBmaW5hbHljb29yZCA9IHBhcnNlSW50KGNvb3JkYXJycmF5WzFdLCAxMCkgLSBvZmZzZXRZU3F1YXJlO1xuXG4gICAgICBpZiAoXG4gICAgICAgIChwb3MgPT09IFwidmVydGljYWxcIiAmJiBmaW5hbHljb29yZCArIGxlbiA+IDEwKSB8fFxuICAgICAgICAocG9zID09PSBcInZlcnRpY2FsXCIgJiYgZmluYWx5Y29vcmQgPCAwKVxuICAgICAgKSB7XG4gICAgICAgIC8vXG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAocG9zID09PSBcImhvcml6b250YWxcIiAmJiBmaW5hbHhjb29yZCArIGxlbiA+IDEwKSB8fFxuICAgICAgICAocG9zID09PSBcImhvcml6b250YWxcIiAmJiBmaW5hbHhjb29yZCA8IDApXG4gICAgICApIHtcbiAgICAgICAgLy9cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBvdmVybGFwcGVkc3RhdHVzID0gZmFsc2U7XG4gICAgICAgIFBsYXllcmJvYXJkLnNoaXBBcnJheS5mb3JFYWNoKChzaGlwKSA9PiB7XG4gICAgICAgICAgc2hpcC5zaGlwc0Nvb3JkaW5hdGVzQXJyYXkuZm9yRWFjaCgoc2hpcGNvb3JkKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICAgIGlmIChwb3MgPT09IFwidmVydGljYWxcIikge1xuICAgICAgICAgICAgICAgIGlmIChzaGlwY29vcmQgPT09IGAke2ZpbmFseGNvb3JkfSwke2ZpbmFseWNvb3JkICsgan1gKSB7XG4gICAgICAgICAgICAgICAgICBvdmVybGFwcGVkc3RhdHVzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocG9zID09PSBcImhvcml6b250YWxcIikge1xuICAgICAgICAgICAgICAgIGlmIChzaGlwY29vcmQgPT09IGAke2ZpbmFseGNvb3JkICsgan0sJHtmaW5hbHljb29yZH1gKSB7XG4gICAgICAgICAgICAgICAgICBvdmVybGFwcGVkc3RhdHVzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKG92ZXJsYXBwZWRzdGF0dXMgPT09IHRydWUpIHtcbiAgICAgICAgICAvL1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIFBsYXllcmJvYXJkLnBsYWNlU2hpcChsZW4sIGZpbmFseGNvb3JkLCBmaW5hbHljb29yZCwgcG9zKTtcbiAgICAgICAgICBjb25zdCBzaGlwZ3JhYmJlZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICAgICAgICAgZS5kYXRhVHJhbnNmZXIuZ2V0RGF0YShcInNoaXBncmFiYmVkXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBzaGlwZ3JhYmJlZC5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgICBzaGlwc3BsYWNlZCArPSAxO1xuICAgICAgICAgIGlmIChzaGlwc3BsYWNlZCA9PT0gNikge1xuICAgICAgICAgICAgc2hpcHNwbGFjZWQgPSAwO1xuICAgICAgICAgICAgc3RhcnRidXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gUGxheWVyYm9hcmQuc2hpcEFycmF5Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgY29uc3QgbGFzdFNoaXAgPSBQbGF5ZXJib2FyZC5zaGlwQXJyYXlbbGFzdEluZGV4XTtcbiAgICAgICAgICBhbGxzcXVhcmVzLmZvckVhY2goKHNxdWFyKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxhc3RTaGlwLnNoaXBzQ29vcmRpbmF0ZXNBcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICBpZiAoc3F1YXIuaWQgPT09IGxhc3RTaGlwLnNoaXBzQ29vcmRpbmF0ZXNBcnJheVtpXSkge1xuICAgICAgICAgICAgICAgIHNxdWFyLmNsYXNzTGlzdC5hZGQoXCJibHVlXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59O1xuXG5jb25zdCBzZWNyZXRmdW5jdGlvbiA9ICgpID0+IHtcbiAgYWxsY29tcHV0ZXJzcXVhcmVzLmZvckVhY2goKGNvbXB1dGVyc3F1YXJlKSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBDb21wdXRlcmJvYXJkLnNoaXBBcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgQ29tcHV0ZXJib2FyZC5zaGlwQXJyYXlbaV0uc2hpcHNDb29yZGluYXRlc0FycmF5LmZvckVhY2goKGFycmF5KSA9PiB7XG4gICAgICAgIGlmIChhcnJheSA9PT0gY29tcHV0ZXJzcXVhcmUuaWQpIHtcbiAgICAgICAgICBjb21wdXRlcnNxdWFyZS5jbGFzc0xpc3QuYWRkKFwiYmx1ZVwiKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn07XG5cbmNvbnN0IHNlY3JldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2VjcmV0XCIpO1xuc2VjcmV0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBzZWNyZXRmdW5jdGlvbik7XG5cbmdlbmVyYXRlVmlzdWFsU2hpcHMoKTtcblxuLy8gY3JlYXRlIGEgcmVzZXQgYnV0dG9uIGZvciBhbGwgc2hpcHNcbmNvbnN0IGNvbXB1dGVyTW92ZSA9ICgpID0+IHtcbiAgY29uc3QgY29tcHV0ZXJndWVzcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29tcHV0ZXJndWVzc1wiKTtcbiAgbGV0IHRlbXBlbmRvZmFycmF5ID0gMDtcbiAgdGVtcGVuZG9mYXJyYXkgPSBQbGF5ZXJib2FyZC5TcXVhcmVzSGl0Lmxlbmd0aDtcbiAgbGV0IHRlbXB4Y29vcmQ7XG4gIGxldCB0ZW1weWNvb3JkO1xuICBsZXQgeG9yeTtcbiAgbGV0IHBsdXNvcm1pbnVzO1xuXG4gIC8vIGNvZGluZyBBSVxuICAvLyBpZiBpdCdzIHRoZSBwcmV2aW91cyBjb21wdXRlciBndWVzcyB3YXMgYSBoaXQuXG4gIGlmIChcbiAgICBjb21wdXRlcmd1ZXNzLnRleHRDb250ZW50ID09PVxuICAgIGBIaXQ6ICR7UGxheWVyYm9hcmQuU3F1YXJlc0hpdFt0ZW1wZW5kb2ZhcnJheSAtIDFdfWBcbiAgKSB7XG4gICAgY29uc3QgbGFzdGNvb3JkID0gUGxheWVyYm9hcmQuU3F1YXJlc0hpdFt0ZW1wZW5kb2ZhcnJheSAtIDFdO1xuICAgIGNvbnN0IGNvb3JkYXJyYXkgPSBsYXN0Y29vcmQuc3BsaXQoXCIsXCIpO1xuICAgIGNvbnN0IGNvb3JkeCA9IGNvb3JkYXJyYXlbMF07XG4gICAgY29uc3QgY29vcmR5ID0gY29vcmRhcnJheVsxXTtcblxuICAgIC8vIG1haW50YWlucyBjdXJyZW50IGRpcmVjdGlvblxuICAgIGlmIChcbiAgICAgIGRpcmVjdGlvbiA9PT0gXCJyaWdodFwiICYmXG4gICAgICBjb29yZHggPCA5ICYmXG4gICAgICBkaXJlY3Rpb25BcnJheS5pbmNsdWRlcyhcInJpZ2h0XCIpID09PSBmYWxzZVxuICAgICkge1xuICAgICAgeG9yeSA9IDA7XG4gICAgICBwbHVzb3JtaW51cyA9IDA7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGRpcmVjdGlvbiA9PT0gXCJsZWZ0XCIgJiZcbiAgICAgIGNvb3JkeCA+IDAgJiZcbiAgICAgIGRpcmVjdGlvbkFycmF5LmluY2x1ZGVzKFwibGVmdFwiKSA9PT0gZmFsc2VcbiAgICApIHtcbiAgICAgIHhvcnkgPSAwO1xuICAgICAgcGx1c29ybWludXMgPSAxO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBkaXJlY3Rpb24gPT09IFwidXBcIiAmJlxuICAgICAgY29vcmR5IDwgOSAmJlxuICAgICAgZGlyZWN0aW9uQXJyYXkuaW5jbHVkZXMoXCJ1cFwiKSA9PT0gZmFsc2VcbiAgICApIHtcbiAgICAgIHhvcnkgPSAxO1xuICAgICAgcGx1c29ybWludXMgPSAwO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBkaXJlY3Rpb24gPT09IFwiZG93blwiICYmXG4gICAgICBjb29yZHkgPiAwICYmXG4gICAgICBkaXJlY3Rpb25BcnJheS5pbmNsdWRlcyhcImRvd25cIikgPT09IGZhbHNlXG4gICAgKSB7XG4gICAgICB4b3J5ID0gMTtcbiAgICAgIHBsdXNvcm1pbnVzID0gMTtcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbkFycmF5Lmxlbmd0aCA9PT0gNCkge1xuICAgICAgdGVtcHhjb29yZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcbiAgICAgIHRlbXB5Y29vcmQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHhvcnkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyKTsgLy8gMCAtIDFcbiAgICAgIHBsdXNvcm1pbnVzID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMik7IC8vIDAgLSAxXG4gICAgfVxuXG4gICAgLy8gdXNlcyB0aGUgZGlyZWN0aW9uIHRvIGFkZCB0byB0aGUgY29vcmRpbmF0ZXMuXG4gICAgaWYgKHhvcnkgPT09IDApIHtcbiAgICAgIGlmIChwbHVzb3JtaW51cyA9PT0gMCkge1xuICAgICAgICB0ZW1weGNvb3JkID0gcGFyc2VJbnQoY29vcmR4LCAxMCkgKyAxO1xuICAgICAgICB0ZW1weWNvb3JkID0gcGFyc2VJbnQoY29vcmR5LCAxMCk7XG4gICAgICAgIGRpcmVjdGlvbiA9IFwicmlnaHRcIjtcbiAgICAgIH0gZWxzZSBpZiAocGx1c29ybWludXMgPT09IDEpIHtcbiAgICAgICAgdGVtcHhjb29yZCA9IHBhcnNlSW50KGNvb3JkeCwgMTApIC0gMTtcbiAgICAgICAgdGVtcHljb29yZCA9IHBhcnNlSW50KGNvb3JkeSwgMTApO1xuICAgICAgICBkaXJlY3Rpb24gPSBcImxlZnRcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHhvcnkgPT09IDEpIHtcbiAgICAgIGlmIChwbHVzb3JtaW51cyA9PT0gMCkge1xuICAgICAgICB0ZW1weGNvb3JkID0gcGFyc2VJbnQoY29vcmR4LCAxMCk7XG4gICAgICAgIHRlbXB5Y29vcmQgPSBwYXJzZUludChjb29yZHksIDEwKSArIDE7XG4gICAgICAgIGRpcmVjdGlvbiA9IFwidXBcIjtcbiAgICAgIH0gZWxzZSBpZiAocGx1c29ybWludXMgPT09IDEpIHtcbiAgICAgICAgdGVtcHhjb29yZCA9IHBhcnNlSW50KGNvb3JkeCwgMTApO1xuICAgICAgICB0ZW1weWNvb3JkID0gcGFyc2VJbnQoY29vcmR5LCAxMCkgLSAxO1xuICAgICAgICBkaXJlY3Rpb24gPSBcImRvd25cIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGVtcHhjb29yZCA8IDAgfHwgdGVtcHhjb29yZCA+IDkgfHwgdGVtcHljb29yZCA+IDkgfHwgdGVtcHljb29yZCA8IDApIHtcbiAgICAgIGlmIChkaXJlY3Rpb24gPT09IFwicmlnaHRcIikge1xuICAgICAgICB0ZW1weGNvb3JkID0gLTA7XG4gICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJsZWZ0XCIpIHtcbiAgICAgICAgdGVtcHhjb29yZCA9ICswO1xuICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09IFwidXBcIikge1xuICAgICAgICB0ZW1weWNvb3JkID0gLTA7XG4gICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PT0gXCJkb3duXCIpIHtcbiAgICAgICAgdGVtcHljb29yZCA9ICswO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBkaXJlY3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgdGVtcHhjb29yZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcbiAgICB0ZW1weWNvb3JkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xuICB9XG4gIGNvbnN0IGNvb3JkID0gYCR7dGVtcHhjb29yZH0sJHt0ZW1weWNvb3JkfWA7XG4gIGlmIChQbGF5ZXJib2FyZC5TcXVhcmVzSGl0LmluY2x1ZGVzKGNvb3JkKSkge1xuICAgIGlmIChkaXJlY3Rpb25BcnJheS5pbmNsdWRlcyhkaXJlY3Rpb24pID09PSBmYWxzZSkge1xuICAgICAgZGlyZWN0aW9uQXJyYXkucHVzaChkaXJlY3Rpb24pO1xuICAgIH1cbiAgICBjb21wdXRlck1vdmUoKTtcbiAgfSBlbHNlIHtcbiAgICBkaXJlY3Rpb25BcnJheS5zcGxpY2UoMCwgZGlyZWN0aW9uQXJyYXkubGVuZ3RoKTtcbiAgICAvLyBeXiBsb29rIGludG8gaWYgdGhhdCdzIGluIHRoZSByaWdodCBwbGFjZS5cbiAgICBQbGF5ZXJib2FyZC5yZWNlaXZlQXR0YWNrKHRlbXB4Y29vcmQsIHRlbXB5Y29vcmQpO1xuICAgIGNvbnN0IGFsbHBsYXllcnNzcXVhcmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wbGF5ZXJzcXVhcmVcIik7XG4gICAgYWxscGxheWVyc3NxdWFyZXMuZm9yRWFjaCgocGxheWVyc3F1YXJlKSA9PiB7XG4gICAgICBpZiAocGxheWVyc3F1YXJlLmlkID09PSBjb29yZCkge1xuICAgICAgICAvLyBMT09QIFRIUk9VR0hcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBQbGF5ZXJib2FyZC5zaGlwQXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgbGV0IGogPSAwO1xuICAgICAgICAgICAgaiA8IFBsYXllcmJvYXJkLnNoaXBBcnJheVtpXS5zaGlwc0Nvb3JkaW5hdGVzQXJyYXkubGVuZ3RoO1xuICAgICAgICAgICAgaiArPSAxXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHBsYXllcnNxdWFyZS5pZCAhPT1cbiAgICAgICAgICAgICAgUGxheWVyYm9hcmQuc2hpcEFycmF5W2ldLnNoaXBzQ29vcmRpbmF0ZXNBcnJheVtqXVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHRlbXBlbmRvZmFycmF5ID0gUGxheWVyYm9hcmQuU3F1YXJlc0hpdC5sZW5ndGg7XG4gICAgICAgICAgICAgIGNvbXB1dGVyZ3Vlc3MudGV4dENvbnRlbnQgPSBgTWlzc2VkOiAke1xuICAgICAgICAgICAgICAgIFBsYXllcmJvYXJkLlNxdWFyZXNIaXRbdGVtcGVuZG9mYXJyYXkgLSAxXVxuICAgICAgICAgICAgICB9YDtcbiAgICAgICAgICAgICAgcGxheWVyc3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJmYWlsZWRoaXRcIik7XG4gICAgICAgICAgICAgIC8vIGRpcmVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgIHBsYXllcnNxdWFyZS5pZCA9PT1cbiAgICAgICAgICAgICAgUGxheWVyYm9hcmQuc2hpcEFycmF5W2ldLnNoaXBzQ29vcmRpbmF0ZXNBcnJheVtqXVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHRlbXBlbmRvZmFycmF5ID0gUGxheWVyYm9hcmQuU3F1YXJlc0hpdC5sZW5ndGg7XG4gICAgICAgICAgICAgIGNvbXB1dGVyZ3Vlc3MudGV4dENvbnRlbnQgPSBgSGl0OiAke1xuICAgICAgICAgICAgICAgIFBsYXllcmJvYXJkLlNxdWFyZXNIaXRbdGVtcGVuZG9mYXJyYXkgLSAxXVxuICAgICAgICAgICAgICB9YDtcbiAgICAgICAgICAgICAgcGxheWVyc3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJzdWNjZXNzZnVsaGl0XCIpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGRpcmVjdGlvbjtcbn07XG5cbmNvbnN0IHBsYXllck1vdmUgPSAoZSkgPT4ge1xuICBjb25zdCBjb21wdXRlcnNxdWFyZSA9IGUudGFyZ2V0O1xuICBjb25zdCBjb21wdXRlclNxdWFyZUNsaWNrZWRDb29yZHNTdHJpbmcgPSBlLnRhcmdldC5pZDtcbiAgY29uc3QgY29tcHV0ZXJTcXVhcmVDbGlja2VkQ29vcmRzQXJyYXkgPVxuICAgIGNvbXB1dGVyU3F1YXJlQ2xpY2tlZENvb3Jkc1N0cmluZy5zcGxpdChcIixcIik7XG4gIGNvbnN0IENsaWNrZWRDb29yZFggPSBjb21wdXRlclNxdWFyZUNsaWNrZWRDb29yZHNBcnJheVswXTtcbiAgY29uc3QgQ2xpY2tlZENvb3JkWSA9IGNvbXB1dGVyU3F1YXJlQ2xpY2tlZENvb3Jkc0FycmF5WzFdO1xuICBsZXQgdGVtcGVuZG9mYXJyYXkgPSAwO1xuICBwcmV2aGl0Y29vcmQudGV4dENvbnRlbnQgPSBDb21wdXRlcmJvYXJkLnJlY2VpdmVBdHRhY2soXG4gICAgQ2xpY2tlZENvb3JkWCxcbiAgICBDbGlja2VkQ29vcmRZXG4gICk7XG5cbiAgaWYgKFxuICAgIHByZXZoaXRjb29yZC50ZXh0Q29udGVudCA9PT1cbiAgICBcIlBsZWFzZSBlbnRlciBjb29yZGluYXRlcyBub3QgcHJldmlvdXNseSBhdHRhY2tlZCFcIlxuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByZXZoaXRjb29yZC50ZXh0Q29udGVudCA9PT0gXCJBdHRhY2sgTWlzc2VkIVwiKSB7XG4gICAgdGVtcGVuZG9mYXJyYXkgPSBDb21wdXRlcmJvYXJkLlNxdWFyZXNIaXQubGVuZ3RoO1xuICAgIHJlc3VsdC50ZXh0Q29udGVudCA9IGBNaXNzZWQ6ICR7XG4gICAgICBDb21wdXRlcmJvYXJkLlNxdWFyZXNIaXRbdGVtcGVuZG9mYXJyYXkgLSAxXVxuICAgIH1gO1xuICAgIHJlc3VsdC5zdHlsZS5jb2xvciA9IFwicmVkXCI7XG4gICAgY29tcHV0ZXJzcXVhcmUuY2xhc3NMaXN0LmFkZChcImZhaWxlZGhpdFwiKTtcbiAgfSBlbHNlIGlmIChwcmV2aGl0Y29vcmQudGV4dENvbnRlbnQgPT09IFwiQXR0YWNrIExhbmRlZCFcIikge1xuICAgIHRlbXBlbmRvZmFycmF5ID0gQ29tcHV0ZXJib2FyZC5TcXVhcmVzSGl0Lmxlbmd0aDtcbiAgICByZXN1bHQudGV4dENvbnRlbnQgPSBgSGl0OiAke0NvbXB1dGVyYm9hcmQuU3F1YXJlc0hpdFt0ZW1wZW5kb2ZhcnJheSAtIDFdfWA7XG4gICAgcmVzdWx0LnN0eWxlLmNvbG9yID0gXCJncmVlblwiO1xuICAgIGNvbXB1dGVyc3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJzdWNjZXNzZnVsaGl0XCIpO1xuICB9XG5cbiAgY29uc3QgaXNPdmVyID0gQ29tcHV0ZXJib2FyZC5kZXRlcm1pbmVJZkNvbmNsdWRlZCgpO1xuICBpZiAoaXNPdmVyID09PSB0cnVlKSB7XG4gICAgY29uc3QgcG5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBsYXllcm5hbWVcIik7XG4gICAgcmVzdWx0LnRleHRDb250ZW50ID0gYEdhbWUgT3ZlciEgJHtwbmFtZS50ZXh0Q29udGVudH0gd2lucyFgO1xuICAgIHJlc3VsdC5zdHlsZS5jb2xvciA9IFwiZ3JlZW5cIjtcbiAgICBhbGxjb21wdXRlcnNxdWFyZXMuZm9yRWFjaCgoY29tcHV0ZXJzcXVhcmVzKSA9PiB7XG4gICAgICBjb21wdXRlcnNxdWFyZXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHBsYXllck1vdmUpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGNvbXB1dGVyTW92ZSgpO1xuICAgIGNvbnN0IGlzT3ZlcjEgPSBQbGF5ZXJib2FyZC5kZXRlcm1pbmVJZkNvbmNsdWRlZCgpO1xuICAgIGlmIChpc092ZXIxID09PSB0cnVlKSB7XG4gICAgICByZXN1bHQudGV4dENvbnRlbnQgPSBgR2FtZSBPdmVyISBDb21wdXRlciB3aW5zIWA7XG4gICAgICByZXN1bHQuc3R5bGUuY29sb3IgPSBcInJlZFwiO1xuICAgICAgYWxsY29tcHV0ZXJzcXVhcmVzLmZvckVhY2goKGNvbXB1dGVyc3F1YXJlcykgPT4ge1xuICAgICAgICBjb21wdXRlcnNxdWFyZXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHBsYXllck1vdmUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCBnYW1lTG9vcCA9ICgpID0+IHtcbiAgc3RhcnRidXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuXG4gIGFsbGNvbXB1dGVyc3F1YXJlcy5mb3JFYWNoKChjb21wdXRlcnNxdWFyZSkgPT4ge1xuICAgIGNvbXB1dGVyc3F1YXJlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBwbGF5ZXJNb3ZlKTtcbiAgfSk7XG59O1xuXG5jb25zdCByZXNldEJ1dHRvbiA9ICgpID0+IHtcbiAgY29uc3QgYWxscGxheWVyc3NxdWFyZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnBsYXllcnNxdWFyZVwiKTtcblxuICBhbGxwbGF5ZXJzc3F1YXJlcy5mb3JFYWNoKChwbGF5ZXJzcXVhcmUpID0+IHtcbiAgICBwbGF5ZXJzcXVhcmUuY2xhc3NMaXN0LnJlbW92ZShcInN1Y2Nlc3NmdWxoaXRcIik7XG4gICAgcGxheWVyc3F1YXJlLmNsYXNzTGlzdC5yZW1vdmUoXCJmYWlsZWRoaXRcIik7XG4gICAgcGxheWVyc3F1YXJlLmNsYXNzTGlzdC5yZW1vdmUoXCJibHVlXCIpO1xuICB9KTtcblxuICBhbGxjb21wdXRlcnNxdWFyZXMuZm9yRWFjaCgoY29tcHV0ZXJzcXVhcmUpID0+IHtcbiAgICBjb21wdXRlcnNxdWFyZS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgcGxheWVyTW92ZSk7XG4gICAgY29tcHV0ZXJzcXVhcmUuY2xhc3NMaXN0LnJlbW92ZShcInN1Y2Nlc3NmdWxoaXRcIik7XG4gICAgY29tcHV0ZXJzcXVhcmUuY2xhc3NMaXN0LnJlbW92ZShcImZhaWxlZGhpdFwiKTtcbiAgICBjb21wdXRlcnNxdWFyZS5jbGFzc0xpc3QucmVtb3ZlKFwiYmx1ZVwiKTtcbiAgfSk7XG5cbiAgcHJldmhpdGNvb3JkLnRleHRDb250ZW50ID0gXCJcIjtcbiAgcmVzdWx0LnRleHRDb250ZW50ID0gXCJcIjtcbiAgY29uc3QgY29tcHV0ZXJndWVzcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29tcHV0ZXJndWVzc1wiKTtcbiAgY29tcHV0ZXJndWVzcy50ZXh0Q29udGVudCA9IFwiQ29tcHV0ZXIncyBHdWVzczogXCI7XG5cbiAgc3RhcnRidXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuXG4gIFBsYXllcmJvYXJkLnNoaXBBcnJheS5zcGxpY2UoMCwgUGxheWVyYm9hcmQuc2hpcEFycmF5Lmxlbmd0aCk7XG4gIFBsYXllcmJvYXJkLlNxdWFyZXNIaXQuc3BsaWNlKDAsIFBsYXllcmJvYXJkLlNxdWFyZXNIaXQubGVuZ3RoKTtcbiAgQ29tcHV0ZXJib2FyZC5zaGlwQXJyYXkuc3BsaWNlKDAsIENvbXB1dGVyYm9hcmQuc2hpcEFycmF5Lmxlbmd0aCk7XG4gIENvbXB1dGVyYm9hcmQuU3F1YXJlc0hpdC5zcGxpY2UoMCwgQ29tcHV0ZXJib2FyZC5TcXVhcmVzSGl0Lmxlbmd0aCk7XG4gIFBsYXllcmJvYXJkLmFyZUFsbFNoaXBzU3VuayA9IGZhbHNlO1xuICBDb21wdXRlcmJvYXJkLmFyZUFsbFNoaXBzU3VuayA9IGZhbHNlO1xuXG4gIGNvbnN0IGFsbHNoaXBzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zaGlwXCIpO1xuICBhbGxzaGlwcy5mb3JFYWNoKChzaGlwKSA9PiB7XG4gICAgc2hpcC5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XG4gIH0pO1xuICBnZW5lcmF0ZUNvbXB1dGVyU2hpcHMoKTtcbn07XG5cbnN0YXJ0YnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBnYW1lTG9vcCk7XG5yZXNldGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgcmVzZXRCdXR0b24pO1xuIiwiY29uc3QgZ2V0UGxheWVyTmFtZSA9ICgpID0+IHtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvdmVybGF5XCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gIGNvbnN0IG5hbWVidXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbmZpcm1uYW1lXCIpO1xuICBuYW1lYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgY29uc3QgbmFtZWlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuYW1lXCIpO1xuICAgIGNvbnN0IGRvbXBsYXllcm5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBsYXllcm5hbWVcIik7XG5cbiAgICBpZiAobmFtZWlucHV0LnZhbHVlID09PSBcIlwiKSB7XG4gICAgICBuYW1laW5wdXQudmFsdWUgPSBcIlBsYXllclwiO1xuICAgIH1cblxuICAgIGRvbXBsYXllcm5hbWUudGV4dENvbnRlbnQgPSBuYW1laW5wdXQudmFsdWU7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvdmVybGF5XCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICBjb25zdCBsYXN0R3Vlc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBsYXllcmd1ZXNzZXNcIik7XG4gICAgbGFzdEd1ZXN0LnRleHRDb250ZW50ID0gYCR7bmFtZWlucHV0LnZhbHVlfSdzIExhc3QgR3Vlc3M6YDtcbiAgICByZXR1cm4gbmFtZWlucHV0LnZhbHVlO1xuICB9KTtcbn07XG5cbmNvbnN0IGdlbmVyYXRlUGxheWVyQm9hcmQgPSAoKSA9PiB7XG4gIGNvbnN0IHBsYXllcmJvYXJkZGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wbGF5ZXJib2FyZFwiKTtcbiAgY29uc3QgcGxheWVyQm9hcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBwbGF5ZXJCb2FyZC5jbGFzc0xpc3QuYWRkKFwicGxheWVyYm9hcmRcIik7XG4gIHBsYXllcmJvYXJkZGl2LmFwcGVuZENoaWxkKHBsYXllckJvYXJkKTtcblxuICBmb3IgKGxldCBpID0gOTsgaSA+PSAtMTsgaSAtPSAxKSB7XG4gICAgY29uc3Qgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICByb3cuY2xhc3NMaXN0LmFkZChcInJvd1wiKTtcblxuICAgIGlmIChpID09PSAtMSkge1xuICAgICAgZm9yIChsZXQgaiA9IC0xOyBqIDwgMTA7IGogKz0gMSkge1xuICAgICAgICBpZiAoaiA9PT0gLTEpIHtcbiAgICAgICAgICBjb25zdCBzcXVhcmVsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgc3F1YXJlbGFiZWwuY2xhc3NMaXN0LmFkZChcInNxdWFyZWxhYmVsXCIpO1xuICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChzcXVhcmVsYWJlbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgc3F1YXJlbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgIHNxdWFyZWxhYmVsLmNsYXNzTGlzdC5hZGQoXCJzcXVhcmVsYWJlbFwiKTtcbiAgICAgICAgICBzcXVhcmVsYWJlbC50ZXh0Q29udGVudCA9IGAke2p9YDtcbiAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQoc3F1YXJlbGFiZWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGogPSAtMTsgaiA8IDEwOyBqICs9IDEpIHtcbiAgICAgICAgaWYgKGogPT09IC0xKSB7XG4gICAgICAgICAgY29uc3Qgc3F1YXJlbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgIHNxdWFyZWxhYmVsLmNsYXNzTGlzdC5hZGQoXCJzcXVhcmVsYWJlbFwiKTtcbiAgICAgICAgICBzcXVhcmVsYWJlbC50ZXh0Q29udGVudCA9IGAke2l9YDtcbiAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQoc3F1YXJlbGFiZWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHNxdWFyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJwbGF5ZXJzcXVhcmVcIik7XG4gICAgICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcImlkXCIsIGAke2p9LCR7aX1gKTtcbiAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQoc3F1YXJlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvL1xuICAgIHBsYXllckJvYXJkLmFwcGVuZENoaWxkKHJvdyk7XG4gIH1cbn07XG5cbmNvbnN0IGdlbmVyYXRlQ29tcHV0ZXJCb2FyZCA9ICgpID0+IHtcbiAgY29uc3QgY29tcHV0ZXJib2FyZGRpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY29tcHV0ZXJib2FyZFwiKTtcbiAgY29uc3QgcGxheWVyQm9hcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBwbGF5ZXJCb2FyZC5jbGFzc0xpc3QuYWRkKFwicGxheWVyYm9hcmRcIik7XG4gIGNvbXB1dGVyYm9hcmRkaXYuYXBwZW5kQ2hpbGQocGxheWVyQm9hcmQpO1xuXG4gIGZvciAobGV0IGkgPSA5OyBpID49IC0xOyBpIC09IDEpIHtcbiAgICBjb25zdCByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHJvdy5jbGFzc0xpc3QuYWRkKFwicm93XCIpO1xuICAgIC8vIGZvclxuICAgIGlmIChpID09PSAtMSkge1xuICAgICAgZm9yIChsZXQgaiA9IC0xOyBqIDwgMTA7IGogKz0gMSkge1xuICAgICAgICBpZiAoaiA9PT0gLTEpIHtcbiAgICAgICAgICBjb25zdCBzcXVhcmVsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgc3F1YXJlbGFiZWwuY2xhc3NMaXN0LmFkZChcInNxdWFyZWxhYmVsXCIpO1xuICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChzcXVhcmVsYWJlbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgc3F1YXJlbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgIHNxdWFyZWxhYmVsLmNsYXNzTGlzdC5hZGQoXCJzcXVhcmVsYWJlbFwiKTtcbiAgICAgICAgICBzcXVhcmVsYWJlbC50ZXh0Q29udGVudCA9IGAke2p9YDtcbiAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQoc3F1YXJlbGFiZWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGogPSAtMTsgaiA8IDEwOyBqICs9IDEpIHtcbiAgICAgICAgaWYgKGogPT09IC0xKSB7XG4gICAgICAgICAgY29uc3Qgc3F1YXJlbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgIHNxdWFyZWxhYmVsLmNsYXNzTGlzdC5hZGQoXCJzcXVhcmVsYWJlbFwiKTtcbiAgICAgICAgICBzcXVhcmVsYWJlbC50ZXh0Q29udGVudCA9IGAke2l9YDtcbiAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQoc3F1YXJlbGFiZWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHNxdWFyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoXCJzcXVhcmVcIik7XG4gICAgICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcImlkXCIsIGAke2p9LCR7aX1gKTtcbiAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQoc3F1YXJlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvL1xuICAgIHBsYXllckJvYXJkLmFwcGVuZENoaWxkKHJvdyk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGdldFBsYXllck5hbWUsIGdlbmVyYXRlUGxheWVyQm9hcmQsIGdlbmVyYXRlQ29tcHV0ZXJCb2FyZCB9O1xuIl0sIm5hbWVzIjpbIkdhbWVib2FyZCIsImFyZUFsbFNoaXBzU3VuayIsIlNxdWFyZXNIaXQiLCJzaGlwQXJyYXkiLCJwbGFjZVNoaXAiLCJsZW5ndGgiLCJ4Y29vcmQiLCJ5Y29vcmQiLCJwb3NpdGlvbiIsIm5ld1NoaXAiLCJ0ZW1weCIsInRlbXB5Iiwic2hpcHNDb29yZGluYXRlc0FycmF5IiwiaSIsInNoaXBDb29yZGluYXRlcyIsInB1c2giLCJoaXRzIiwiaGl0IiwiaXNTdW5rIiwibGVuZ3RoT2ZTaGlwIiwiaGl0c09mU2hpcCIsInN1bmtTdGF0dXMiLCJTaGlwIiwicmVjZWl2ZUF0dGFjayIsIndhc0hpdCIsIm1lc3NhZ2UiLCJjb29yZGluYXRlcyIsImluY2x1ZGVzIiwiZm9yRWFjaCIsInNoaXAiLCJzZWxlY3RlZFNoaXBDb29yZGluYXRlcyIsImRldGVybWluZUlmQ29uY2x1ZGVkIiwic3Vua2VuU2hpcHMiLCJwbGF5ZXJzbmFtZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzdHlsZSIsImRpc3BsYXkiLCJhZGRFdmVudExpc3RlbmVyIiwibmFtZWlucHV0IiwiZG9tcGxheWVybmFtZSIsInF1ZXJ5U2VsZWN0b3IiLCJ2YWx1ZSIsInRleHRDb250ZW50IiwiY29uc29sZSIsImxvZyIsInBsYXllcmJvYXJkZGl2IiwicGxheWVyQm9hcmQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiYXBwZW5kQ2hpbGQiLCJyb3ciLCJqIiwic3F1YXJlbGFiZWwiLCJzcXVhcmUiLCJzZXRBdHRyaWJ1dGUiLCJnZW5lcmF0ZVBsYXllckJvYXJkIiwiUGxheWVyYm9hcmQiLCJjb21wdXRlcmJvYXJkZGl2IiwiZ2VuZXJhdGVDb21wdXRlckJvYXJkIiwiQ29tcHV0ZXJib2FyZCIsInN0YXJ0YnV0dG9uIiwiZGlzYWJsZWQiLCJyZXNldGJ1dHRvbiIsInJlc3VsdCIsInByZXZoaXRjb29yZCIsImFsbGNvbXB1dGVyc3F1YXJlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJkaXJlY3Rpb25BcnJheSIsImRpcmVjdGlvbiIsImdlbmVyYXRlQ29tcHV0ZXJTaGlwcyIsInRlbXB4Y29vcmQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJ0ZW1weWNvb3JkIiwidGVtcHBvcyIsInRlbXBwb3NpdGlvbiIsIm92ZXJsYXBwZWRzdGF0dXMiLCJzaGlwY29vcmQiLCJjb21wdXRlcnNxdWFyZSIsImFycmF5IiwiaWQiLCJzaGlwc3BsYWNlZCIsImUiLCJkYXRhVHJhbnNmZXIiLCJzZXREYXRhIiwidGFyZ2V0IiwidGVtcGxlbmd0aCIsImNoaWxkRWxlbWVudENvdW50Iiwib2Zmc2V0WCIsIm9mZnNldFkiLCJjb250YWlucyIsImFsbHNxdWFyZXMiLCJwcmV2ZW50RGVmYXVsdCIsInN0cmluZ2xlbiIsImdldERhdGEiLCJ4b2ZmIiwieW9mZiIsInBvcyIsImxlbiIsInBhcnNlSW50Iiwib2Zmc2V0WFNxdWFyZSIsIm9mZnNldFlTcXVhcmUiLCJ0ZW1wb09mZnNldFlTcXVhcmUiLCJjZWlsIiwiY29vcmRhcnJyYXkiLCJzcGxpdCIsImZpbmFseGNvb3JkIiwiZmluYWx5Y29vcmQiLCJ2aXNpYmlsaXR5IiwibGFzdEluZGV4IiwibGFzdFNoaXAiLCJzcXVhciIsImdlbmVyYXRlVmlzdWFsU2hpcHMiLCJjb21wdXRlck1vdmUiLCJjb21wdXRlcmd1ZXNzIiwieG9yeSIsInBsdXNvcm1pbnVzIiwidGVtcGVuZG9mYXJyYXkiLCJjb29yZGFycmF5IiwiY29vcmR4IiwiY29vcmR5IiwidW5kZWZpbmVkIiwiY29vcmQiLCJzcGxpY2UiLCJwbGF5ZXJzcXVhcmUiLCJwbGF5ZXJNb3ZlIiwiY29tcHV0ZXJTcXVhcmVDbGlja2VkQ29vcmRzQXJyYXkiLCJDbGlja2VkQ29vcmRYIiwiQ2xpY2tlZENvb3JkWSIsImNvbG9yIiwicG5hbWUiLCJjb21wdXRlcnNxdWFyZXMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlIl0sInNvdXJjZVJvb3QiOiIifQ==